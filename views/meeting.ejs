<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MLM Meeting Management</title>
    <style>
        :root {
            --primary-color: #4361ee;
            --primary-light: #4895ef;
            --primary-dark: #3a0ca3;
            --secondary-color: #7209b7;
            --success-color: #4cc9f0;
            --danger-color: #f72585;
            --warning-color: #f8961e;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --gray-color: #6c757d;
            --gradient: linear-gradient(135deg, #4361ee 0%, #3a0ca3 50%, #7209b7 100%);
            --card-shadow: 0 10px 30px rgba(67, 97, 238, 0.1);
        }
        
        body {
            font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            background-color: #f5f7fa;
            color: #333;
            overflow-x: hidden;
            min-height: 100vh;
        }
        
        /* Floating Particles Background */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            overflow: hidden;
        }
        
        .particle {
            position: absolute;
            background: rgba(67, 97, 238, 0.1);
            border-radius: 50%;
            animation: float 15s infinite ease-in-out;
            filter: blur(1px);
        }
        
        @keyframes float {
            0%, 100% {
                transform: translate(0, 0) rotate(0deg);
            }
            25% {
                transform: translate(20px, 50px) rotate(90deg);
            }
            50% {
                transform: translate(0, 100px) rotate(180deg);
            }
            75% {
                transform: translate(-20px, 50px) rotate(270deg);
            }
        }
        
        .container {
            max-width: 1200px;
            margin: 30px auto;
            background: #fff;
            padding: 40px;
            border-radius: 20px;
            box-shadow: var(--card-shadow);
            position: relative;
            overflow: hidden;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.1);
            transform: translateY(0);
            opacity: 0;
            animation: fadeInUp 0.8s 0.2s forwards;
            border: 1px solid rgba(67, 97, 238, 0.1);
        }
        
        .container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 6px;
            height: 100%;
            background: var(--gradient);
            z-index: 1;
        }
        
        .container:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 50px rgba(67, 97, 238, 0.15);
        }
        
        h1, h2 {
            color: var(--dark-color);
            margin-top: 0;
            position: relative;
            padding-bottom: 15px;
            font-weight: 700;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 30px;
            background: var(--gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            display: inline-block;
            text-shadow: 0 2px 10px rgba(67, 97, 238, 0.1);
        }
        
        h1::after, h2::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 80px;
            height: 4px;
            background: var(--gradient);
            border-radius: 4px;
            transform-origin: left;
            animation: scaleIn 0.8s 0.4s cubic-bezier(0.22, 1, 0.36, 1) forwards;
            transform: scaleX(0);
        }
        
        @keyframes scaleIn {
            to {
                transform: scaleX(1);
            }
        }
        
        h1 i, h2 i {
            margin-right: 15px;
            animation: bounceIn 0.8s 0.3s both;
        }
        
        @keyframes bounceIn {
            0% {
                transform: scale(0);
                opacity: 0;
            }
            50% {
                transform: scale(1.2);
                opacity: 1;
            }
            100% {
                transform: scale(1);
            }
        }
        
        .form-group {
            margin-bottom: 30px;
            position: relative;
            transition: all 0.4s ease;
            opacity: 0;
            transform: translateY(20px);
            animation: fadeInUp 0.6s forwards;
        }
        
        @keyframes fadeInUp {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        label {
            display: block;
            margin-bottom: 12px;
            font-weight: 600;
            color: var(--dark-color);
            font-size: 1.05rem;
            transition: all 0.3s ease;
        }
        
        label:hover {
            color: var(--primary-color);
        }
        
        input, select, textarea {
            width: 100%;
            padding: 16px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            box-sizing: border-box;
            font-size: 16px;
            transition: all 0.3s ease;
            background-color: #f8f9fa;
            font-family: 'Poppins', sans-serif;
        }
        
        input:focus, select:focus, textarea:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 0 4px rgba(67, 97, 238, 0.2);
            background-color: #fff;
        }
        
        button {
            background: var(--gradient);
            color: white;
            border: none;
            padding: 16px 32px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
            display: inline-flex;
            align-items: center;
            gap: 12px;
            box-shadow: 0 4px 15px rgba(67, 97, 238, 0.3);
            position: relative;
            overflow: hidden;
            transform: perspective(500px) translateZ(0);
        }
        
        button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: 0.5s;
        }
        
        button:hover {
            transform: perspective(500px) translateZ(20px) translateY(-5px);
            box-shadow: 0 8px 25px rgba(67, 97, 238, 0.4);
        }
        
        button:hover::before {
            left: 100%;
        }
        
        button:active {
            transform: translateY(0) scale(0.98);
        }
        
        .meeting-list {
            margin-top: 50px;
        }
        
        .meeting-card {
            background: #fff;
            padding: 30px;
            margin-bottom: 30px;
            border-radius: 15px;
            box-shadow: var(--card-shadow);
            transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
            position: relative;
            overflow: hidden;
            border-left: 5px solid var(--primary-color);
            opacity: 0;
            transform: translateY(20px);
            animation: fadeInUp 0.6s forwards;
            border: 1px solid rgba(67, 97, 238, 0.1);
        }
        
        .meeting-card:hover {
            transform: translateY(-8px) perspective(500px) translateZ(10px);
            box-shadow: 0 15px 35px rgba(67, 97, 238, 0.15);
        }
        
        .meeting-card h3 {
            margin-top: 0;
            color: var(--dark-color);
            font-size: 1.5em;
            position: relative;
            font-weight: 600;
        }
        
        .meeting-meta {
            font-size: 15px;
            color: var(--gray-color);
            margin-bottom: 20px;
            display: flex;
            flex-wrap: wrap;
            gap: 30px;
        }
        
        .meeting-meta span {
            display: flex;
            align-items: center;
            transition: all 0.3s ease;
        }
        
        .meeting-meta span:hover {
            color: var(--primary-color);
        }
        
        .meeting-meta i {
            margin-right: 12px;
            color: var(--primary-color);
            font-size: 1.1em;
        }
        
        .action-buttons {
            margin-top: 25px;
            display: flex;
            gap: 20px;
        }
        
        .action-buttons button {
            padding: 12px 24px;
            font-size: 14px;
        }
        
        .delete-btn {
            background: linear-gradient(135deg, #f72585 0%, #b5179e 100%);
            box-shadow: 0 4px 15px rgba(247, 37, 133, 0.3);
        }
        
        .delete-btn:hover {
            box-shadow: 0 8px 25px rgba(247, 37, 133, 0.4);
        }
        
        /* Enhanced Map Styling */
        #map {
            height: 500px;
            width: 100%;
            margin-top: 20px;
            display: none;
            border-radius: 15px;
            border: 2px solid var(--primary-color);
            box-shadow: 0 10px 30px rgba(67, 97, 238, 0.2);
            transition: all 0.4s ease;
            overflow: hidden;
        }
        
        #map:hover {
            box-shadow: 0 15px 40px rgba(67, 97, 238, 0.3);
        }
        
        .map-controls {
            margin-top: 25px;
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }
        
        .map-controls button {
            padding: 12px 24px;
            font-size: 15px;
            border-radius: 10px;
            display: inline-flex;
            align-items: center;
            gap: 10px;
        }
        
        .map-search-input {
            background-color: #f8f9fa;
            border: 2px solid #e9ecef;
            padding: 16px;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        .map-search-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 4px rgba(67, 97, 238, 0.2);
        }
        
        .toggle-container {
            margin-bottom: 25px;
            display: flex;
            gap: 40px;
        }
        
        .toggle-option {
            display: flex;
            align-items: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .toggle-option:hover {
            transform: translateY(-3px);
        }
        
        .toggle-option input[type="radio"] {
            margin-right: 12px;
            width: 22px;
            height: 22px;
            accent-color: var(--primary-color);
            cursor: pointer;
            position: relative;
            z-index: 1;
            opacity: 0;
        }
        
        .toggle-option label {
            cursor: pointer;
            padding-left: 35px;
            position: relative;
            margin-bottom: 0;
        }
        
        .toggle-option label::before {
            content: '';
            position: absolute;
            left: 0;
            top: 50%;
            transform: translateY(-50%);
            width: 22px;
            height: 22px;
            border: 2px solid #e9ecef;
            border-radius: 50%;
            background: #f8f9fa;
            transition: all 0.3s ease;
        }
        
        .toggle-option label::after {
            content: '';
            position: absolute;
            left: 5px;
            top: 50%;
            transform: translateY(-50%) scale(0);
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: var(--primary-color);
            transition: all 0.3s ease;
        }
        
        .toggle-option input[type="radio"]:checked + label::before {
            border-color: var(--primary-color);
        }
        
        .toggle-option input[type="radio"]:checked + label::after {
            transform: translateY(-50%) scale(1);
        }
        
        /* Floating animation for form elements */
        .floating {
            animation: floating 4s ease-in-out infinite;
        }
        
        @keyframes floating {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        
        /* Pulse animation for important elements */
        .pulse {
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(67, 97, 238, 0.5); }
            70% { box-shadow: 0 0 0 15px rgba(67, 97, 238, 0); }
            100% { box-shadow: 0 0 0 0 rgba(67, 97, 238, 0); }
        }
        
        /* Glow animation for focus elements */
        @keyframes glow {
            0% { box-shadow: 0 0 5px rgba(67, 97, 238, 0.3); }
            100% { box-shadow: 0 0 20px rgba(67, 97, 238, 0.5); }
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .container {
                padding: 25px;
                margin: 15px;
                border-radius: 15px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .toggle-container {
                flex-direction: column;
                gap: 20px;
            }
            
            .action-buttons, .map-controls {
                flex-direction: column;
                gap: 15px;
            }
            
            button, .action-buttons button, .map-controls button {
                width: 100%;
                justify-content: center;
            }
            
            #map {
                height: 350px;
            }
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 10px;
        }
        
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        ::-webkit-scrollbar-thumb {
            background: var(--primary-color);
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: var(--primary-dark);
        }
        
        /* Ripple effect for buttons */
        .ripple {
            position: relative;
            overflow: hidden;
        }
        
        .ripple-effect {
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.4);
            transform: scale(0);
            animation: ripple 0.6s linear;
            pointer-events: none;
        }
        
        @keyframes ripple {
            to {
                transform: scale(2.5);
                opacity: 0;
            }
        }
        
        /* Animated checkmark for form submission */
        .checkmark {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: block;
            stroke-width: 5;
            stroke: #fff;
            stroke-miterlimit: 10;
            margin: 20px auto;
            box-shadow: 0 0 0 rgba(67, 97, 238, 0.4);
            animation: checkmark-fill 0.4s ease-in-out 0.4s forwards, checkmark-scale 0.3s ease-in-out 0.9s both;
        }
        
        .checkmark-circle {
            stroke-dasharray: 166;
            stroke-dashoffset: 166;
            stroke-width: 5;
            stroke-miterlimit: 10;
            stroke: var(--primary-color);
            fill: none;
            animation: checkmark-stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
        }
        
        .checkmark-check {
            transform-origin: 50% 50%;
            stroke-dasharray: 48;
            stroke-dashoffset: 48;
            animation: checkmark-stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
        }
        
        @keyframes checkmark-stroke {
            100% {
                stroke-dashoffset: 0;
            }
        }
        
        @keyframes checkmark-scale {
            0%, 100% {
                transform: none;
            }
            50% {
                transform: scale3d(1.1, 1.1, 1);
            }
        }
        
        @keyframes checkmark-fill {
            100% {
                box-shadow: inset 0 0 0 100px var(--primary-color);
            }
        }
        
        /* Success message */
        .success-message {
            text-align: center;
            padding: 40px;
            display: none;
            animation: fadeIn 0.6s ease-out forwards;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .success-message h2 {
            margin-top: 20px;
            color: var(--primary-color);
            animation: textGlow 2s infinite alternate;
        }
        
        @keyframes textGlow {
            from { text-shadow: 0 0 5px rgba(67, 97, 238, 0.3); }
            to { text-shadow: 0 0 15px rgba(67, 97, 238, 0.5); }
        }
        
        /* Form loading state */
        .form-loading {
            position: relative;
            pointer-events: none;
        }
        
        .form-loading::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255,255,255,0.7);
            z-index: 10;
            border-radius: 10px;
        }
        
        .form-loading::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 40px;
            height: 40px;
            margin: -20px 0 0 -20px;
            border: 4px solid rgba(67, 97, 238, 0.2);
            border-top-color: var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            z-index: 11;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Floating label effect */
        .float-label {
            position: relative;
        }
        
        .float-label label {
            position: absolute;
            top: 16px;
            left: 16px;
            color: var(--gray-color);
            transition: all 0.3s ease;
            pointer-events: none;
            background: #f8f9fa;
            padding: 0 5px;
            border-radius: 4px;
        }
        
        .float-label input:focus + label,
        .float-label input:not(:placeholder-shown) + label,
        .float-label select:focus + label,
        .float-label select:not([value=""]) + label {
            top: -10px;
            left: 10px;
            font-size: 12px;
            color: var(--primary-color);
            background: white;
        }
        
        /* Hover effect for cards */
        .meeting-card:hover::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, rgba(67, 97, 238, 0.05) 0%, rgba(255,255,255,0) 100%);
            z-index: 0;
        }
        
        /* Input focus glow */
        input:focus, select:focus, textarea:focus {
            animation: glow 1.5s infinite alternate;
        }
        
        /* Tooltip styles */
        .tooltip {
            position: relative;
            display: inline-block;
        }
        
        .tooltip .tooltiptext {
            visibility: hidden;
            width: 200px;
            background-color: var(--dark-color);
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 10px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 14px;
            font-weight: normal;
        }
        
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        
        /* Confetti effect */
        .confetti {
            position: fixed;
            width: 10px;
            height: 10px;
            background-color: var(--primary-color);
            opacity: 0;
            z-index: 1000;
            animation: confettiFall 5s linear forwards;
        }
        
        @keyframes confettiFall {
            0% {
                transform: translateY(-100vh) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(360deg);
                opacity: 0;
            }
        }
        
        /* Location coordinates display */
        .coordinates-display {
            margin-top: 10px;
            font-size: 14px;
            color: var(--gray-color);
            display: flex;
            gap: 15px;
        }
        
        .coordinates-display span {
            display: flex;
            align-items: center;
        }
        
        .coordinates-display i {
            margin-right: 5px;
            color: var(--primary-color);
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
      <%- include("../utils/header")%> 
    <%- include("side")%>
    
    <!-- Floating Particles Background -->
    <div class="particles" id="particles"></div>
    
    <div class="container">
        <h1><i class="fas fa-calendar-star"></i> MLM Meeting Management</h1>
        
        <div class="meeting-form" id="meetingFormContainer">
            <h2><i class="fas fa-plus-circle"></i> Schedule New Meeting</h2>
            <form id="meetingForm" method="POST">
                <div class="form-group" style="animation-delay: 0.1s">
                    <label for="meetingTitle"><i class="fas fa-heading"></i> Meeting Title</label>
                    <input type="text" id="meetingTitle" name="title" required>
                </div>
                
                <div class="form-group" style="animation-delay: 0.2s">
                    <label for="meetingDate"><i class="fas fa-calendar-day"></i> Date & Time</label>
                    <input type="datetime-local" id="meetingDate" name="dateTime" required>
                </div>
                
                <div class="form-group" style="animation-delay: 0.3s">
                    <label><i class="fas fa-video"></i> Meeting Type</label>
                    <div class="toggle-container">
                        <div class="toggle-option">
                            <input type="radio" id="meetingTypeOnline" name="meetingMode" value="online" checked>
                            <label for="meetingTypeOnline">Online</label>
                        </div>
                        <div class="toggle-option">
                            <input type="radio" id="meetingTypeOffline" name="meetingMode" value="offline">
                            <label for="meetingTypeOffline">Offline</label>
                        </div>
                    </div>
                </div>
                
                <div class="form-group" id="onlineLocationGroup" style="animation-delay: 0.4s">
                    <label for="meetingPlatform"><i class="fas fa-laptop"></i> Online Platform</label>
                    <select id="meetingPlatform" name="meetingPlatform" required>
                        <option value="">Select platform</option>
                        <option value="zoom">Zoom</option>
                        <option value="google_meet">Google Meet</option>
                        <option value="teams">Microsoft Teams</option>
                        <option value="skype">Skype</option>
                        <option value="other">Other</option>
                    </select>
                    <div class="form-group" id="meetingLinkGroup" style="display: none;">
                        <label for="meetingLink"><i class="fas fa-link"></i> Meeting Link</label>
                        <input type="url" id="meetingLink" name="meetingLink" placeholder="https://">
                    </div>
                </div>
                
                <div class="form-group" id="offlineLocationGroup" style="display: none; animation-delay: 0.4s">
                    <label for="meetingAddress"><i class="fas fa-map-marker-alt"></i> Physical Address</label>
                    <input type="text" id="meetingAddress" name="meetingAddress" placeholder="Search for a location or address" class="map-search-input" required>
                    <div id="map"></div>
                    <div class="coordinates-display">
                        <span id="latitudeDisplay"><i class="fas fa-latitude"></i> Latitude: <span id="latValue">Not selected</span></span>
                        <span id="longitudeDisplay"><i class="fas fa-longitude"></i> Longitude: <span id="lngValue">Not selected</span></span>
                    </div>
                    <div class="map-controls">
                        <button type="button" id="clearMarker" class="delete-btn ripple">
                            <i class="fas fa-trash"></i> Clear Marker
                        </button>
                        <button type="button" id="getLocation" class="ripple">
                            <i class="fas fa-location-arrow"></i> Use Current Location
                        </button>
                        <button type="button" id="zoomIn" class="ripple">
                            <i class="fas fa-search-plus"></i> Zoom In
                        </button>
                        <button type="button" id="zoomOut" class="ripple">
                            <i class="fas fa-search-minus"></i> Zoom Out
                        </button>
                    </div>
                    <input type="hidden" id="latitude" name="latitude">
                    <input type="hidden" id="longitude" name="longitude">
                </div>
                
                <div class="form-group" style="animation-delay: 0.5s">
                    <label for="meetingCategory"><i class="fas fa-tag"></i> Meeting Category</label>
                    <select id="meetingCategory" name="meetingCategory" required>
                        <option value="">Select category</option>
                        <option value="training">Training</option>
                        <option value="recruitment">Recruitment</option>
                        <option value="team">Team Meeting</option>
                        <option value="product">Product Launch</option>
                    </select>
                </div>
                
                <div class="form-group" style="animation-delay: 0.6s">
                    <label for="meetingDescription"><i class="fas fa-align-left"></i> Description</label>
                    <textarea id="meetingDescription" name="description" rows="4"></textarea>
                </div>
                
                <div class="form-group" style="animation-delay: 0.7s">
                    <label for="meetingStatus"><i class="fas fa-info-circle"></i> Status</label>
                    <select id="meetingStatus" name="status">
                        <option value="scheduled">Scheduled</option>
                        <option value="completed">Completed</option>
                        <option value="canceled">Canceled</option>
                    </select>
                </div>
                
                <button type="submit" class="submit-btn pulse ripple" style="animation-delay: 0.8s">
                    <i class="fas fa-save"></i> Schedule Meeting
                </button>
            </form>
        </div>
        
        <div class="success-message" id="successMessage">
            <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                <circle class="checkmark-circle" cx="26" cy="26" r="25" fill="none"/>
                <path class="checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8"/>
            </svg>
            <h2>Meeting Scheduled Successfully!</h2>
            <p>Your meeting has been added to the schedule. You'll receive a confirmation shortly.</p>
            <button class="ripple" id="scheduleAnother">
                <i class="fas fa-plus"></i> Schedule Another Meeting
            </button>
        </div>
    </div>

    <!-- Load Google Maps API with Places library -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB-B3o9cuaDBoEzeb4-Mdxo5FNCMWGaz6s&libraries=places&callback=initApp" async defer></script>

    <script>
        // Create floating particles
        function createParticles() {
            const particlesContainer = document.getElementById('particles');
            const particleCount = 25;
            
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.classList.add('particle');
                
                // Random size between 50px and 200px
                const size = Math.random() * 150 + 50;
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                
                // Random position
                particle.style.left = `${Math.random() * 100}%`;
                particle.style.top = `${Math.random() * 100}%`;
                
                // Random opacity
                particle.style.opacity = Math.random() * 0.3 + 0.1;
                
                // Random animation duration and delay
                particle.style.animationDuration = `${Math.random() * 20 + 10}s`;
                particle.style.animationDelay = `${Math.random() * 10}s`;
                
                // Random color variation
                const hue = 230 + Math.random() * 20; // Blue-purple range
                particle.style.backgroundColor = `hsla(${hue}, 80%, 70%, ${Math.random() * 0.2 + 0.1})`;
                
                particlesContainer.appendChild(particle);
            }
        }
        
        // Create confetti effect
        function createConfetti() {
            const colors = ['#4361ee', '#3a0ca3', '#7209b7', '#4cc9f0', '#f72585'];
            const confettiCount = 100;
            
            for (let i = 0; i < confettiCount; i++) {
                const confetti = document.createElement('div');
                confetti.classList.add('confetti');
                
                // Random properties
                const size = Math.random() * 10 + 5;
                const color = colors[Math.floor(Math.random() * colors.length)];
                const left = Math.random() * 100;
                const animationDuration = Math.random() * 3 + 2;
                const animationDelay = Math.random() * 5;
                
                confetti.style.width = `${size}px`;
                confetti.style.height = `${size}px`;
                confetti.style.backgroundColor = color;
                confetti.style.left = `${left}%`;
                confetti.style.animationDuration = `${animationDuration}s`;
                confetti.style.animationDelay = `${animationDelay}s`;
                
                document.body.appendChild(confetti);
                
                // Remove confetti after animation
                setTimeout(() => {
                    confetti.remove();
                }, animationDuration * 1000);
            }
        }
        
        // Ripple effect for buttons
        function createRipple(event) {
            const button = event.currentTarget;
            const circle = document.createElement("span");
            const diameter = Math.max(button.clientWidth, button.clientHeight);
            const radius = diameter / 2;
            
            circle.style.width = circle.style.height = `${diameter}px`;
            circle.style.left = `${event.clientX - button.getBoundingClientRect().left - radius}px`;
            circle.style.top = `${event.clientY - button.getBoundingClientRect().top - radius}px`;
            circle.classList.add("ripple-effect");
            
            const ripple = button.getElementsByClassName("ripple-effect")[0];
            if (ripple) {
                ripple.remove();
            }
            
            button.appendChild(circle);
        }
        
        let map;
        let marker;
        let autocomplete;
        let geocoder;
        let mapInitialized = false;
        
        // Initialize the application
        function initApp() {
            createParticles();
            
            // Add ripple effect to buttons
            const buttons = document.querySelectorAll('.ripple');
            buttons.forEach(button => {
                button.addEventListener('click', createRipple);
            });
            
            // Meeting type toggle
            document.querySelectorAll('input[name="meetingMode"]').forEach(radio => {
                radio.addEventListener('change', toggleMeetingType);
            });

            // Platform selection change
            document.getElementById('meetingPlatform').addEventListener('change', function() {
                const linkGroup = document.getElementById('meetingLinkGroup');
                linkGroup.style.display = this.value === 'other' ? 'block' : 'none';
            });
            
            // Clear marker button
            document.getElementById('clearMarker').addEventListener('click', clearMarker);
            
            // Get current location button
            document.getElementById('getLocation').addEventListener('click', getCurrentLocation);
            
            // Zoom controls
            document.getElementById('zoomIn').addEventListener('click', function() {
                if (map) map.setZoom(map.getZoom() + 1);
            });
            
            document.getElementById('zoomOut').addEventListener('click', function() {
                if (map) map.setZoom(map.getZoom() - 1);
            });
            
            // Schedule another button
            document.getElementById('scheduleAnother').addEventListener('click', function() {
                document.getElementById('meetingFormContainer').style.display = 'block';
                document.getElementById('successMessage').style.display = 'none';
                document.getElementById('meetingForm').reset();
                clearMarker();
            });
            
            // Form submission
            document.getElementById('meetingForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Show loading state
                this.classList.add('form-loading');
                
                // Collect form data
                const formData = {
                    title: document.getElementById('meetingTitle').value,
                    dateTime: document.getElementById('meetingDate').value,
                    meetingMode: document.querySelector('input[name="meetingMode"]:checked').value,
                    meetingCategory: document.getElementById('meetingCategory').value,
                    description: document.getElementById('meetingDescription').value,
                    status: document.getElementById('meetingStatus').value
                };

                // Add online meeting details if applicable
                if (formData.meetingMode === 'online') {
                    formData.meetingPlatform = document.getElementById('meetingPlatform').value;
                    if (formData.meetingPlatform === 'other') {
                        formData.meetingLink = document.getElementById('meetingLink').value;
                    }
                } else {
                    // Add offline meeting details
                    formData.meetingAddress = document.getElementById('meetingAddress').value;
                    formData.latitude = document.getElementById('latitude').value;
                    formData.longitude = document.getElementById('longitude').value;
                    
                    // Validate offline location
                    if (!formData.latitude || !formData.longitude) {
                        alert('Please select a location on the map for offline meetings');
                        this.classList.remove('form-loading');
                        return;
                    }
                }

                // Make AJAX call to your backend
                fetch('/create_meeting', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        // Include authorization header if needed
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => response.json())
                .then(data => {
                    this.classList.remove('form-loading');
                    
                    if (data.success) {
                        document.getElementById('meetingFormContainer').style.display = 'none';
                        document.getElementById('successMessage').style.display = 'block';
                        
                        // Create confetti effect
                        createConfetti();
                        
                        // Reset form after showing success message
                        setTimeout(() => {
                            this.reset();
                            clearMarker(); // Clear the map marker
                        }, 1000);
                    } else {
                        alert(`Error: ${data.message}`);
                    }
                })
                .catch(error => {
                    this.classList.remove('form-loading');
                    console.error('Error:', error);
                    alert('Failed to create meeting. Please try again.');
                });
            });
            
            // Initialize map if offline is selected by default
            if (document.getElementById('meetingTypeOffline').checked) {
                initMap();
            }
            
            // Add staggered animations to form groups
            const formGroups = document.querySelectorAll('.form-group');
            formGroups.forEach((group, index) => {
                group.style.animationDelay = `${index * 0.1 + 0.1}s`;
            });
            
            // Add hover effects to form inputs
            const inputs = document.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                input.addEventListener('focus', function() {
                    this.parentElement.querySelector('label').style.color = 'var(--primary-color)';
                });
                
                input.addEventListener('blur', function() {
                    this.parentElement.querySelector('label').style.color = 'var(--dark-color)';
                });
            });
        }

        function toggleMeetingType() {
            const isOnline = document.getElementById('meetingTypeOnline').checked;
            document.getElementById('onlineLocationGroup').style.display = isOnline ? 'block' : 'none';
            document.getElementById('offlineLocationGroup').style.display = isOnline ? 'none' : 'block';
            
            // Add required attribute to offline fields when offline is selected
            document.getElementById('meetingAddress').required = !isOnline;
            
            if (!isOnline && !mapInitialized) {
                initMap();
            } else if (!isOnline && mapInitialized) {
                document.getElementById('map').style.display = 'block';
            }
        }

        function initMap() {
            const mapElement = document.getElementById('map');
            mapElement.style.display = 'block';
            
            // Custom map style (clean and professional)
            const mapStyles = [
                {
                    "featureType": "all",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {"saturation": 36},
                        {"color": "#333333"},
                        {"lightness": 40}
                    ]
                },
                {
                    "featureType": "all",
                    "elementType": "labels.text.stroke",
                    "stylers": [
                        {"visibility": "on"},
                        {"color": "#ffffff"},
                        {"lightness": 16}
                    ]
                },
                {
                    "featureType": "all",
                    "elementType": "labels.icon",
                    "stylers": [
                        {"visibility": "off"}
                    ]
                },
                {
                    "featureType": "administrative",
                    "elementType": "geometry.fill",
                    "stylers": [
                        {"color": "#fefefe"},
                        {"lightness": 20}
                    ]
                },
                {
                    "featureType": "administrative",
                    "elementType": "geometry.stroke",
                    "stylers": [
                        {"color": "#fefefe"},
                        {"lightness": 17},
                        {"weight": 1.2}
                    ]
                },
                {
                    "featureType": "landscape",
                    "elementType": "geometry",
                    "stylers": [
                        {"color": "#f5f5f5"},
                        {"lightness": 20}
                    ]
                },
                {
                    "featureType": "poi",
                    "elementType": "geometry",
                    "stylers": [
                        {"color": "#f5f5f5"},
                        {"lightness": 21}
                    ]
                },
                {
                    "featureType": "road.highway",
                    "elementType": "geometry.fill",
                    "stylers": [
                        {"color": "#ffffff"},
                        {"lightness": 17}
                    ]
                },
                {
                    "featureType": "road.highway",
                    "elementType": "geometry.stroke",
                    "stylers": [
                        {"color": "#ffffff"},
                        {"lightness": 29},
                        {"weight": 0.2}
                    ]
                },
                {
                    "featureType": "road.arterial",
                    "elementType": "geometry",
                    "stylers": [
                        {"color": "#ffffff"},
                        {"lightness": 18}
                    ]
                },
                {
                    "featureType": "road.local",
                    "elementType": "geometry",
                    "stylers": [
                        {"color": "#ffffff"},
                        {"lightness": 16}
                    ]
                },
                {
                    "featureType": "transit",
                    "elementType": "geometry",
                    "stylers": [
                        {"color": "#f2f2f2"},
                        {"lightness": 19}
                    ]
                },
                {
                    "featureType": "water",
                    "elementType": "geometry",
                    "stylers": [
                        {"color": "#4361ee"},
                        {"lightness": 17}
                    ]
                }
            ];
            
            // Create the map with custom style
            map = new google.maps.Map(mapElement, {
                center: { lat: 20.5937, lng: 78.9629 }, // India coordinates
                zoom: 5,
                styles: mapStyles,
                mapTypeControl: true,
                streetViewControl: true,
                zoomControl: false, // We'll use custom zoom controls
                fullscreenControl: true,
                mapTypeControlOptions: {
                    style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
                    position: google.maps.ControlPosition.TOP_RIGHT
                }
            });
            
            // Initialize geocoder
            geocoder = new google.maps.Geocoder();
            
            // Initialize autocomplete for address input
            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById('meetingAddress'),
                {
                    types: ['geocode', 'establishment'],
                    componentRestrictions: {country: 'in'},
                    fields: ['geometry', 'formatted_address']
                }
            );
            
            // Add listener for when a place is selected from autocomplete
            autocomplete.addListener('place_changed', function() {
                const place = autocomplete.getPlace();
                if (!place.geometry) {
                    alert("No details available for input: '" + place.name + "'");
                    return;
                }
                
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }
                
                placeMarker(place.geometry.location);
            });
            
            // Add click listener on map to add marker
            map.addListener('click', function(event) {
                placeMarker(event.latLng);
            });
            
            mapInitialized = true;
        }
        
        function placeMarker(location) {
            if (marker) {
                marker.setMap(null);
            }
            
            marker = new google.maps.Marker({
                position: location,
                map: map,
                draggable: true,
                animation: google.maps.Animation.DROP,
                icon: {
                    url: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png',
                    scaledSize: new google.maps.Size(40, 40)
                }
            });
            
            map.setCenter(location);
            map.setZoom(17);
            
            updateCoordinates(location);
            
            // Reverse geocode to get address
            geocoder.geocode({ location: location }, function(results, status) {
                if (status === 'OK' && results[0]) {
                    document.getElementById('meetingAddress').value = results[0].formatted_address;
                }
            });
            
            // Create info window
            const infoWindow = new google.maps.InfoWindow({
                content: '<div style="padding:10px;"><strong>Meeting Location</strong><br>' + 
                         'Lat: ' + location.lat().toFixed(6) + '<br>' +
                         'Lng: ' + location.lng().toFixed(6) + '</div>'
            });
            
            marker.addListener('click', function() {
                infoWindow.open(map, marker);
            });
            
            marker.addListener('dragend', function() {
                updateCoordinates(marker.getPosition());
                // Update address when marker is dragged
                geocoder.geocode({ location: marker.getPosition() }, function(results, status) {
                    if (status === 'OK' && results[0]) {
                        document.getElementById('meetingAddress').value = results[0].formatted_address;
                    }
                });
            });
        }
        
        function updateCoordinates(location) {
            const lat = location.lat();
            const lng = location.lng();
            
            document.getElementById('latitude').value = lat;
            document.getElementById('longitude').value = lng;
            
            // Update the displayed coordinates
            document.getElementById('latValue').textContent = lat.toFixed(6);
            document.getElementById('lngValue').textContent = lng.toFixed(6);
        }
        
        function clearMarker() {
            if (marker) {
                marker.setMap(null);
                marker = null;
            }
            document.getElementById('meetingAddress').value = '';
            document.getElementById('latitude').value = '';
            document.getElementById('longitude').value = '';
            document.getElementById('latValue').textContent = 'Not selected';
            document.getElementById('lngValue').textContent = 'Not selected';
        }
        
        function getCurrentLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    function(position) {
                        const pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        placeMarker(pos);
                    },
                    function(error) {
                        let errorMessage = 'Error getting your location: ';
                        switch(error.code) {
                            case error.PERMISSION_DENIED:
                                errorMessage += "You denied the request for Geolocation.";
                                break;
                            case error.POSITION_UNAVAILABLE:
                                errorMessage += "Location information is unavailable.";
                                break;
                            case error.TIMEOUT:
                                errorMessage += "The request to get user location timed out.";
                                break;
                            case error.UNKNOWN_ERROR:
                                errorMessage += "An unknown error occurred.";
                                break;
                        }
                        alert(errorMessage);
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 10000,
                        maximumAge: 0
                    }
                );
            } else {
                alert('Error: Your browser doesn\'t support geolocation.');
            }
        }
    </script>
</body>
</html>