<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Alumni Portal | Login</title>
  
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Animate.css -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: #4cc9f0;
      --primary-dark: #3a56d4;
      --white: #ffffff;
      --gray: #6c757d;
      --light-gray: #e9ecef;
      --error: #ff3860;
      --success: #4BB543;
      --border-radius: 20px;
      --box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.15);
      --transition: all 0.5s cubic-bezier(0.25, 1, 0.5, 1);
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      padding: 20px;
      position: relative;
      overflow: hidden;
    }

    /* Quantum particles background - Enhanced */
    .quantum-particle {
      position: absolute;
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: var(--primary-light);
      opacity: 0;
      filter: blur(1px);
      z-index: -1;
      animation: quantum-drift linear infinite;
      transform-style: preserve-3d;
    }

    @keyframes quantum-drift {
      0% {
        transform: translate3d(0, 0, 0) scale(0.3);
        opacity: 0;
      }
      10% {
        opacity: 0.8;
      }
      90% {
        opacity: 0.6;
      }
      100% {
        transform: translate3d(var(--tx, 100px), var(--ty, 100px), 0) scale(1.8);
        opacity: 0;
      }
    }

    /* Holographic grid background */
    .holographic-grid {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: 
        linear-gradient(rgba(67, 97, 238, 0.05) 1px, transparent 1px),
        linear-gradient(90deg, rgba(67, 97, 238, 0.05) 1px, transparent 1px);
      background-size: 40px 40px;
      z-index: -2;
      animation: grid-pulse 8s infinite alternate;
    }

    @keyframes grid-pulse {
      0%, 100% { opacity: 0.3; }
      50% { opacity: 0.7; }
    }

    /* Cyberpunk neon glow effect */
    .cyberpunk-glow {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle at center, rgba(76, 201, 240, 0.15) 0%, transparent 70%);
      z-index: -1;
      opacity: 0;
      animation: cyberpunk-pulse 8s infinite alternate;
    }

    @keyframes cyberpunk-pulse {
      0%, 100% { opacity: 0.1; transform: scale(0.95); }
      50% { opacity: 0.3; transform: scale(1.05); }
    }

    /* Main login container - Enhanced reveal */
    .login-container {
      max-width: 500px;
      width: 100%;
      perspective: 1000px;
      opacity: 0;
      transform: scale(0.8) rotateY(30deg);
      animation: cyberpunk-reveal 1.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.3s forwards;
    }

    @keyframes cyberpunk-reveal {
      0% {
        opacity: 0;
        transform: scale(0.8) rotateY(30deg) translateY(50px);
        filter: blur(10px) hue-rotate(90deg);
      }
      60% {
        filter: blur(2px) hue-rotate(0deg);
      }
      100% {
        opacity: 1;
        transform: scale(1) rotateY(0) translateY(0);
        filter: blur(0) hue-rotate(0deg);
      }
    }

    /* Neon card with enhanced scanline effect */
    .login-card {
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      background: rgba(255, 255, 255, 0.97);
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      overflow: hidden;
      transition: var(--transition);
      transform-style: preserve-3d;
      position: relative;
      border: 1px solid rgba(255, 255, 255, 0.4);
      transform: translateZ(0);
    }

    .login-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        to bottom,
        transparent 95%,
        rgba(76, 201, 240, 0.15) 96%,
        transparent 97%
      );
      background-size: 100% 8px;
      pointer-events: none;
      animation: scanline 6s linear infinite;
      z-index: 2;
    }

    .login-card::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        135deg,
        rgba(255, 255, 255, 0.03) 0%,
        rgba(255, 255, 255, 0) 50%,
        rgba(255, 255, 255, 0.03) 100%
      );
      pointer-events: none;
      z-index: 1;
    }

    @keyframes scanline {
      0% { background-position: 0 0; }
      100% { background-position: 0 100%; }
    }

    .login-card:hover {
      transform: translateY(-10px) rotateX(1deg) rotateY(1deg) translateZ(20px);
      box-shadow: 0 30px 60px rgba(0, 0, 0, 0.25), 
                  0 0 0 2px rgba(76, 201, 240, 0.4),
                  0 0 30px rgba(76, 201, 240, 0.3);
    }

    /* Header with enhanced digital rain effect */
    .login-header {
      background: linear-gradient(135deg, var(--primary), var(--primary-dark));
      color: var(--white);
      padding: 3rem;
      text-align: center;
      position: relative;
      overflow: hidden;
      transform: translateZ(40px);
    }

    .login-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        to bottom,
        transparent 0%,
        rgba(255, 255, 255, 0.08) 50%,
        transparent 100%
      );
      animation: digital-rain 4s linear infinite;
      opacity: 0.6;
    }

    .login-header::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        to bottom,
        transparent 0%,
        rgba(255, 255, 255, 0.05) 50%,
        transparent 100%
      );
      animation: digital-rain 6s linear infinite reverse;
      opacity: 0.4;
    }

    @keyframes digital-rain {
      0% { transform: translateY(-100%); }
      100% { transform: translateY(100%); }
    }

    .login-header h2 {
      font-weight: 600;
      margin-bottom: 0.5rem;
      font-size: 2.2rem;
      position: relative;
      animation: text-glitch 1s cubic-bezier(0.25, 1, 0.5, 1) both;
      text-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
    }

    @keyframes text-glitch {
      0% {
        opacity: 0;
        transform: translateY(-20px) scaleX(0.9);
        text-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
      }
      50% {
        text-shadow: 0 0 30px rgba(255, 255, 255, 0.8), 
                     0 0 10px rgba(67, 97, 238, 0.5);
      }
      100% {
        opacity: 1;
        transform: translateY(0) scaleX(1);
      }
    }

    .login-header p {
      font-weight: 300;
      opacity: 0.9;
      position: relative;
      animation: fade-in 1s 0.3s cubic-bezier(0.25, 1, 0.5, 1) both;
    }

    /* Login body with floating inputs - Enhanced */
    .login-body {
      padding: 3rem;
      position: relative;
      transform: translateZ(20px);
    }

    .form-group {
      margin-bottom: 2rem;
      position: relative;
      animation: input-appear 1s 0.5s cubic-bezier(0.25, 1, 0.5, 1) both;
    }

    @keyframes input-appear {
      0% {
        opacity: 0;
        transform: translateY(30px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .input-container {
      position: relative;
      transition: var(--transition);
      transform-style: preserve-3d;
    }

    .input-container:hover {
      transform: translateY(-5px) translateZ(10px);
    }

    .form-control {
      width: 100%;
      height: 60px;
      border-radius: var(--border-radius);
      border: none;
      padding: 0 60px 0 25px;
      font-size: 1rem;
      transition: var(--transition);
      background: rgba(233, 236, 239, 0.6);
      box-shadow: inset 0 2px 10px rgba(0, 0, 0, 0.08);
      font-weight: 500;
      border: 1px solid rgba(0, 0, 0, 0.05);
      transform: translateZ(0);
    }

    .form-control:focus {
      background: var(--white);
      box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.3), 
                  inset 0 2px 10px rgba(0, 0, 0, 0.05);
      outline: none;
      animation: input-pulse 2s infinite;
      border: 1px solid rgba(67, 97, 238, 0.3);
      transform: translateZ(5px);
    }

    @keyframes input-pulse {
      0%, 100% { 
        box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.3); 
      }
      50% { 
        box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.5),
                    0 0 15px rgba(67, 97, 238, 0.2); 
      }
    }

    /* Error state for inputs */
    .form-control.error {
      border: 1px solid var(--error);
      box-shadow: 0 0 0 3px rgba(255, 56, 96, 0.3);
      animation: error-pulse 1.5s infinite;
    }

    @keyframes error-pulse {
      0%, 100% { 
        box-shadow: 0 0 0 3px rgba(255, 56, 96, 0.3); 
      }
      50% { 
        box-shadow: 0 0 0 3px rgba(255, 56, 96, 0.5),
                    0 0 15px rgba(255, 56, 96, 0.2); 
      }
    }

    .error-message {
      color: var(--error);
      font-size: 0.85rem;
      margin-top: 8px;
      display: none;
      animation: fade-in 0.3s ease-out;
    }

    .input-icon {
      position: absolute;
      right: 25px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--gray);
      transition: var(--transition);
      pointer-events: none;
      font-size: 1.2rem;
      transform-style: preserve-3d;
    }

    .form-control:focus ~ .input-icon {
      color: var(--primary);
      animation: icon-float 1.5s infinite alternate;
      text-shadow: 0 0 10px rgba(67, 97, 238, 0.3);
    }

    .form-control.error ~ .input-icon {
      color: var(--error);
      animation: icon-shake 0.5s ease-in-out;
    }

    @keyframes icon-float {
      0% { 
        transform: translateY(-50%) translateZ(0);
      }
      100% { 
        transform: translateY(-60%) translateZ(5px);
        text-shadow: 0 0 15px rgba(67, 97, 238, 0.5);
      }
    }

    @keyframes icon-shake {
      0%, 100% { transform: translateY(-50%) translateX(0); }
      20%, 60% { transform: translateY(-50%) translateX(-5px); }
      40%, 80% { transform: translateY(-50%) translateX(5px); }
    }

    /* Holographic button with enhanced energy pulse */
    .btn-login {
      background: linear-gradient(135deg, var(--primary), var(--primary-dark));
      color: white;
      border: none;
      height: 60px;
      border-radius: var(--border-radius);
      width: 100%;
      font-weight: 600;
      font-size: 1.1rem;
      cursor: pointer;
      transition: var(--transition);
      margin-top: 1rem;
      position: relative;
      overflow: hidden;
      animation: btn-appear 1s 0.7s cubic-bezier(0.25, 1, 0.5, 1) both;
      box-shadow: 0 10px 30px rgba(67, 97, 238, 0.4),
                  0 0 0 0 rgba(76, 201, 240, 0.7);
      text-transform: uppercase;
      letter-spacing: 1px;
      transform-style: preserve-3d;
      z-index: 1;
    }

    @keyframes btn-appear {
      0% {
        opacity: 0;
        transform: translateY(40px) scale(0.8);
      }
      100% {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }

    .btn-login:hover {
      background: linear-gradient(135deg, var(--primary-dark), var(--primary));
      box-shadow: 0 15px 40px rgba(67, 97, 238, 0.5),
                  0 0 0 10px rgba(76, 201, 240, 0);
      transform: translateY(-5px) translateZ(10px);
      animation: energy-pulse 2.5s infinite;
    }

    @keyframes energy-pulse {
      0%, 100% {
        box-shadow: 0 15px 40px rgba(67, 97, 238, 0.5),
                    0 0 0 0 rgba(76, 201, 240, 0.8);
      }
      50% {
        box-shadow: 0 15px 40px rgba(67, 97, 238, 0.5),
                    0 0 0 15px rgba(76, 201, 240, 0);
      }
    }

    .btn-login:active {
      transform: translateY(0) translateZ(5px);
    }

    .btn-login::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        90deg, 
        transparent, 
        rgba(255, 255, 255, 0.4), 
        transparent
      );
      transition: 0.8s;
      z-index: -1;
    }

    .btn-login:hover::before {
      left: 100%;
    }

    .btn-login::after {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      border-radius: var(--border-radius);
      background: linear-gradient(135deg, var(--primary-light), var(--primary), var(--primary-dark));
      z-index: -2;
      filter: blur(5px);
      opacity: 0;
      transition: 0.5s;
    }

    .btn-login:hover::after {
      opacity: 0.6;
    }

    .btn-content {
      position: relative;
      z-index: 2;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 15px;
    }

    /* Signup link with enhanced digital trace */
    .signup-link {
      text-align: center;
      margin-top: 2.5rem;
      color: var(--gray);
      animation: fade-in 1s 0.9s cubic-bezier(0.25, 1, 0.5, 1) both;
      position: relative;
    }

    .signup-link a {
      color: var(--primary);
      text-decoration: none;
      font-weight: 500;
      transition: var(--transition);
      position: relative;
    }

    .signup-link a::before {
      content: '';
      position: absolute;
      bottom: -5px;
      left: 0;
      width: 0;
      height: 2px;
      background: var(--primary-dark);
      transition: var(--transition);
      border-radius: 2px;
    }

    .signup-link a:hover::before {
      width: 100%;
      animation: digital-trace 0.8s cubic-bezier(0.25, 1, 0.5, 1);
    }

    @keyframes digital-trace {
      0% {
        width: 0;
        box-shadow: 0 0 10px var(--primary-light);
      }
      50% {
        width: 100%;
        box-shadow: 0 0 20px var(--primary-light);
        background: var(--primary-light);
      }
      100% {
        width: 100%;
        box-shadow: 0 0 0 var(--primary-light);
        background: var(--primary-dark);
      }
    }

    /* Status message */
    .status-message {
      position: fixed;
      top: 30px;
      left: 50%;
      transform: translateX(-50%);
      padding: 15px 30px;
      border-radius: 50px;
      background: var(--primary);
      color: white;
      font-weight: 500;
      box-shadow: 0 10px 30px rgba(67, 97, 238, 0.4);
      z-index: 1000;
      opacity: 0;
      transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
      pointer-events: none;
    }

    .status-message.show {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }

    /* Responsive adjustments */
    @media (max-width: 600px) {
      .login-container {
        max-width: 100%;
      }
      
      .login-header {
        padding: 2rem;
      }
      
      .login-body {
        padding: 2rem;
      }
    }
  </style>
</head>
<body>
  <!-- Holographic grid background -->
  <div class="holographic-grid"></div>
  
  <!-- Cyberpunk glow effect -->
  <div class="cyberpunk-glow"></div>
  
  <!-- Status message -->
  <div class="status-message" id="statusMessage"></div>
  
  <!-- Quantum particles will be added by JavaScript -->
  
  <div class="login-container">
    <div class="login-card">
      <div class="login-header">
        <h2><i class="fas fa-graduation-cap"></i> Alumni Portal</h2>
        <p>Welcome back to your alumni community</p>
      </div>

      <div class="login-body">
        <form id="loginForm" action="/loginrout" method="post">
          <div class="form-group">
            <div class="input-container">
              <input type="email" id="yourUsername" name="email" class="form-control" required placeholder="Email Address">
              <i class="fas fa-envelope input-icon"></i>
            </div>
            <div class="error-message" id="emailError">Please enter a valid email address</div>
          </div>

          <div class="form-group">
            <div class="input-container">
              <input type="password" id="yourPassword" name="pass" class="form-control" required placeholder="Password">
              <i class="fas fa-lock input-icon"></i>
            </div>
            <div class="error-message" id="passwordError">Password must be at least 6 characters</div>
          </div>

          <button type="submit" class="btn-login" id="loginButton">
            <span class="btn-content">
              <i class="fas fa-fingerprint"></i> Authenticate
            </span>
          </button>

          <div class="signup-link">
            New to our community? <a href="/signup_page">Join as alumni</a>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Enhanced quantum particles with 3D effect
    function createQuantumParticles() {
      const colors = ['#4361ee', '#4cc9f0', '#3a56d4', '#4895ef', '#3a0ca3'];
      const body = document.body;
      const particleCount = Math.floor(window.innerWidth / 20);
      
      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'quantum-particle';
        
        // Random properties with enhanced 3D effect
        const size = Math.random() * 8 + 4;
        const posX = Math.random() * 100;
        const posY = Math.random() * 100;
        const tx = (Math.random() - 0.5) * 300;
        const ty = (Math.random() - 0.5) * 300;
        const duration = Math.random() * 15 + 10;
        const delay = Math.random() * 10;
        const color = colors[Math.floor(Math.random() * colors.length)];
        const zIndex = Math.floor(Math.random() * 10) - 5;
        
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        particle.style.left = `${posX}%`;
        particle.style.top = `${posY}%`;
        particle.style.setProperty('--tx', `${tx}px`);
        particle.style.setProperty('--ty', `${ty}px`);
        particle.style.animationDuration = `${duration}s`;
        particle.style.animationDelay = `${delay}s`;
        particle.style.backgroundColor = color;
        particle.style.zIndex = zIndex;
        particle.style.opacity = Math.random() * 0.5 + 0.1;
        
        body.appendChild(particle);
      }
    }

    // Show status message
    function showStatusMessage(message, type = 'info', duration = 3000) {
      const statusMessage = document.getElementById('statusMessage');
      statusMessage.textContent = message;
      statusMessage.className = 'status-message show';
      
      // Set color based on type
      if (type === 'error') {
        statusMessage.style.background = 'var(--error)';
        statusMessage.style.boxShadow = '0 10px 30px rgba(255, 56, 96, 0.4)';
      } else if (type === 'success') {
        statusMessage.style.background = 'var(--success)';
        statusMessage.style.boxShadow = '0 10px 30px rgba(75, 181, 67, 0.4)';
      } else {
        statusMessage.style.background = 'var(--primary)';
        statusMessage.style.boxShadow = '0 10px 30px rgba(67, 97, 238, 0.4)';
      }
      
      // Hide after duration
      setTimeout(() => {
        statusMessage.className = 'status-message';
      }, duration);
    }

    // Validate email format
    function validateEmail(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(String(email).toLowerCase());
    }

    // Validate password (at least 6 characters)
    function validatePassword(password) {
      return password.length >= 6;
    }

    // Show error for input field
    function showError(input, errorElement, message) {
      input.classList.add('error');
      errorElement.textContent = message;
      errorElement.style.display = 'block';
    }

    // Hide error for input field
    function hideError(input, errorElement) {
      input.classList.remove('error');
      errorElement.style.display = 'none';
    }

    // Enhanced cyberpunk authentication sequence
    document.getElementById('loginForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Get form elements
      const emailInput = document.getElementById('yourUsername');
      const passwordInput = document.getElementById('yourPassword');
      const emailError = document.getElementById('emailError');
      const passwordError = document.getElementById('passwordError');
      const btn = document.getElementById('loginButton');
      const icon = document.querySelector('.btn-content i');
      const text = document.querySelector('.btn-content');
      const form = this;
      
      // Validate inputs
      let isValid = true;
      
      if (!emailInput.value || !validateEmail(emailInput.value)) {
        showError(emailInput, emailError, 'Please enter a valid email address');
        isValid = false;
      } else {
        hideError(emailInput, emailError);
      }
      
      if (!passwordInput.value || !validatePassword(passwordInput.value)) {
        showError(passwordInput, passwordError, 'Password must be at least 6 characters');
        isValid = false;
      } else {
        hideError(passwordInput, passwordError);
      }
      
      if (!isValid) {
        showStatusMessage('Please fix the errors in the form', 'error');
        return;
      }
      
      // Start cyberpunk authentication sequence
      btn.style.pointerEvents = 'none';
      btn.style.animation = 'none';
      btn.style.boxShadow = '0 15px 40px rgba(67, 97, 238, 0.5)';
      
      // Phase 1: Scanning with particle effect
      icon.className = 'fas fa-redo fa-spin';
      text.innerHTML = '<i class="fas fa-redo fa-spin"></i> Scanning...';
      createAuthParticles(btn);
      
      setTimeout(() => {
        // Phase 2: Verifying with holographic effect
        icon.className = 'fas fa-shield-alt';
        text.innerHTML = '<i class="fas fa-shield-alt"></i> Verifying Credentials';
        btn.style.boxShadow = '0 15px 40px rgba(67, 97, 238, 0.5), 0 0 0 10px rgba(76, 201, 240, 0.7)';
        btn.style.background = 'linear-gradient(135deg, #3a0ca3, #4361ee)';
        
        setTimeout(() => {
          // Phase 3: Granting Access with success effect
          icon.className = 'fas fa-check-circle';
          text.innerHTML = '<i class="fas fa-check-circle"></i> Access Granted';
          btn.style.background = 'linear-gradient(135deg, var(--success), #3a9a33)';
          btn.style.boxShadow = '0 15px 40px rgba(75, 181, 67, 0.5), 0 0 0 15px rgba(75, 181, 67, 0)';
          
          // Create success particles
          createSuccessParticles(btn);
          
          // Show success message
          showStatusMessage('Login successful! Redirecting...', 'success');
          
          // Submit form after animation
          setTimeout(() => {
            form.submit();
          }, 1500);
        }, 2000);
      }, 2000);
    });

    // Create authentication particles effect
    function createAuthParticles(element) {
      const rect = element.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;
      
      for (let i = 0; i < 20; i++) {
        const particle = document.createElement('div');
        particle.className = 'auth-particle';
        
        const size = Math.random() * 6 + 2;
        const angle = Math.random() * Math.PI * 2;
        const distance = Math.random() * 50 + 30;
        const duration = Math.random() * 1 + 0.5;
        
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        particle.style.background = '#4cc9f0';
        particle.style.borderRadius = '50%';
        particle.style.position = 'fixed';
        particle.style.left = `${centerX}px`;
        particle.style.top = `${centerY}px`;
        particle.style.opacity = '0.8';
        particle.style.filter = 'blur(1px)';
        particle.style.transform = `translate(${Math.cos(angle) * distance}px, ${Math.sin(angle) * distance}px)`;
        particle.style.animation = `auth-particle-fade ${duration}s forwards`;
        
        document.body.appendChild(particle);
        
        // Remove particle after animation
        setTimeout(() => {
          particle.remove();
        }, duration * 1000);
      }
    }

    // Create success particles effect
    function createSuccessParticles(element) {
      const rect = element.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;
      
      for (let i = 0; i < 30; i++) {
        const particle = document.createElement('div');
        particle.className = 'success-particle';
        
        const size = Math.random() * 8 + 3;
        const angle = Math.random() * Math.PI * 2;
        const distance = Math.random() * 80 + 40;
        const duration = Math.random() * 1.5 + 0.5;
        
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        particle.style.background = '#4BB543';
        particle.style.borderRadius = '50%';
        particle.style.position = 'fixed';
        particle.style.left = `${centerX}px`;
        particle.style.top = `${centerY}px`;
        particle.style.opacity = '0.8';
        particle.style.filter = 'blur(1px)';
        particle.style.transform = `translate(${Math.cos(angle) * distance}px, ${Math.sin(angle) * distance}px)`;
        particle.style.animation = `success-particle-fade ${duration}s forwards`;
        
        document.body.appendChild(particle);
        
        // Remove particle after animation
        setTimeout(() => {
          particle.remove();
        }, duration * 1000);
      }
    }

    // Add CSS for particle animations
    const style = document.createElement('style');
    style.textContent = `
      @keyframes auth-particle-fade {
        0% {
          transform: translate(0, 0);
          opacity: 0.8;
        }
        100% {
          transform: translate(var(--tx, 0), var(--ty, 0));
          opacity: 0;
        }
      }
      
      @keyframes success-particle-fade {
        0% {
          transform: translate(0, 0);
          opacity: 0.8;
          filter: blur(1px);
        }
        50% {
          opacity: 1;
          filter: blur(0);
        }
        100% {
          transform: translate(var(--tx, 0), var(--ty, 0));
          opacity: 0;
          filter: blur(2px);
        }
      }
    `;
    document.head.appendChild(style);

    // Initialize everything when page loads
    document.addEventListener('DOMContentLoaded', function() {
      createQuantumParticles();
      
      // Add parallax effect to quantum particles
      document.addEventListener('mousemove', function(e) {
        const particles = document.querySelectorAll('.quantum-particle');
        particles.forEach(particle => {
          const speed = parseFloat(particle.style.zIndex || 0) * 2;
          const x = (e.clientX - window.innerWidth / 2) / 50 * speed;
          const y = (e.clientY - window.innerHeight / 2) / 50 * speed;
          particle.style.transform = `translate(${x}px, ${y}px) translateZ(${speed}px)`;
        });
      });
      
      // Check for URL parameters to show messages
      const urlParams = new URLSearchParams(window.location.search);
      const status = urlParams.get('status');
      
      if (status === 'error') {
        showStatusMessage('Login failed. Please try again.', 'error');
      } else if (status === 'logout') {
        showStatusMessage('You have been logged out successfully.', 'success');
      } else if (status === 'session_expired') {
        showStatusMessage('Your session has expired. Please login again.', 'error');
      }
    });
  </script>
</body>
</html>