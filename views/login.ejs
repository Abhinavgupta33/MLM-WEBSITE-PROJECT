<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Alumni Portal | Login</title>
  
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: #4cc9f0;
      --primary-dark: #3a56d4;
      --white: #ffffff;
      --gray: #6c757d;
      --light-gray: #e9ecef;
      --border-radius: 12px;
      --box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
      --glass-effect: rgba(255, 255, 255, 0.95);
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background-color: #f8f9fa;
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      padding: 20px;
      overflow: hidden;
      position: relative;
    }

    /* Cosmic Background Animation - Light Theme */
    .cosmic-bg {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -2;
      background: linear-gradient(135deg, #e6f0ff, #f0f5ff, #e6ecf5);
      overflow: hidden;
    }

    /* Animated Gradient Background - Light Theme */
    .gradient-bg {
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(
        45deg, 
        rgba(67, 97, 238, 0.05) 0%, 
        rgba(76, 201, 240, 0.08) 25%, 
        rgba(255, 255, 255, 0.05) 50%, 
        rgba(76, 201, 240, 0.08) 75%, 
        rgba(67, 97, 238, 0.05) 100%
      );
      background-size: 400% 400%;
      animation: gradientFlow 25s ease infinite;
      z-index: -1;
    }

    @keyframes gradientFlow {
      0% {
        background-position: 0% 50%;
      }
      50% {
        background-position: 100% 50%;
      }
      100% {
        background-position: 0% 50%;
      }
    }

    /* Floating Particles - Light Theme */
    .particles {
      position: absolute;
      width: 100%;
      height: 100%;
      z-index: -1;
    }

    .particle {
      position: absolute;
      border-radius: 50%;
      filter: blur(1px);
      animation: floatParticle linear infinite;
      background: radial-gradient(circle, rgba(255,255,255,0.9) 0%, rgba(67, 97, 238, 0.3) 70%);
    }

    @keyframes floatParticle {
      0% {
        transform: translateY(0) translateX(0) rotate(0deg);
        opacity: 1;
      }
      100% {
        transform: translateY(-1000px) translateX(500px) rotate(720deg);
        opacity: 0;
      }
    }

    /* Floating Bubbles - Light Theme */
    .bubbles {
      position: absolute;
      width: 100%;
      height: 100%;
      z-index: -1;
      overflow: hidden;
    }

    .bubble {
      position: absolute;
      bottom: -100px;
      background: rgba(67, 97, 238, 0.1);
      border-radius: 50%;
      animation: rise linear infinite;
      box-shadow: inset 0 0 10px rgba(67, 97, 238, 0.2);
    }

    @keyframes rise {
      0% {
        bottom: -100px;
        transform: translateX(0);
      }
      50% {
        transform: translateX(100px);
      }
      100% {
        bottom: 1080px;
        transform: translateX(-200px);
      }
    }

    /* Floating Shapes - Light Theme */
    .floating-shapes {
      position: absolute;
      width: 100%;
      height: 100%;
      z-index: -1;
    }

    .shape {
      position: absolute;
      opacity: 0.1;
      animation: floatShape linear infinite;
    }

    .shape.triangle {
      width: 0;
      height: 0;
      border-left: 50px solid transparent;
      border-right: 50px solid transparent;
      border-bottom: 100px solid var(--primary);
    }

    .shape.circle {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      background: var(--primary-light);
    }

    .shape.square {
      width: 100px;
      height: 100px;
      background: var(--primary-dark);
    }

    @keyframes floatShape {
      0% {
        transform: translateY(0) translateX(0) rotate(0deg);
      }
      100% {
        transform: translateY(-500px) translateX(200px) rotate(360deg);
      }
    }

    /* Light Rays - Light Theme */
    .light-rays {
      position: absolute;
      width: 100%;
      height: 100%;
      z-index: -1;
      overflow: hidden;
    }

    .light-ray {
      position: absolute;
      width: 2px;
      height: 200%;
      background: linear-gradient(to bottom, transparent, rgba(67, 97, 238, 0.3), transparent);
      animation: rayAnimation linear infinite;
      transform-origin: top center;
    }

    @keyframes rayAnimation {
      0% {
        transform: rotate(0deg) translateY(-50%);
      }
      100% {
        transform: rotate(360deg) translateY(-50%);
      }
    }

    /* Starfield Background - Light Theme */
    .starfield {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -2;
      overflow: hidden;
    }

    .star {
      position: absolute;
      background-color: rgba(67, 97, 238, 0.5);
      border-radius: 50%;
      animation: twinkle var(--duration) infinite ease-in-out;
    }

    @keyframes twinkle {
      0%, 100% { opacity: 0.2; }
      50% { opacity: 0.6; }
    }

    /* Nebula Effect - Light Theme */
    .nebula {
      position: absolute;
      width: 100%;
      height: 100%;
      z-index: -1;
      opacity: 0.2;
    }

    .nebula-cloud {
      position: absolute;
      border-radius: 50%;
      filter: blur(50px);
      animation: nebulaFloat linear infinite;
    }

    @keyframes nebulaFloat {
      0% {
        transform: translate(0, 0);
      }
      50% {
        transform: translate(50px, 50px);
      }
      100% {
        transform: translate(0, 0);
      }
    }

    /* Meteor Shower - Light Theme */
    .meteor-shower {
      position: absolute;
      width: 100%;
      height: 100%;
      z-index: -1;
      overflow: hidden;
    }

    .meteor {
      position: absolute;
      width: 2px;
      height: 2px;
      background: rgba(67, 97, 238, 0.8);
      border-radius: 50%;
      box-shadow: 0 0 10px 2px rgba(67, 97, 238, 0.5);
      animation: meteorFall linear infinite;
    }

    @keyframes meteorFall {
      0% {
        transform: translateX(0) translateY(0);
        opacity: 1;
      }
      70% {
        opacity: 1;
      }
      100% {
        transform: translateX(1000px) translateY(500px);
        opacity: 0;
      }
    }

    /* Floating Islands - Light Theme */
    .floating-islands {
      position: absolute;
      width: 100%;
      height: 100%;
      z-index: -1;
    }

    .island {
      position: absolute;
      background-size: contain;
      background-repeat: no-repeat;
      animation: islandFloat ease-in-out infinite;
      opacity: 0.1;
    }

    @keyframes islandFloat {
      0%, 100% {
        transform: translateY(0) rotate(0deg);
      }
      50% {
        transform: translateY(-20px) rotate(2deg);
      }
    }

    /* Login Container */
    .login-container {
      max-width: 450px;
      width: 100%;
      animation: fadeIn 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275) both;
      perspective: 1000px;
      transform-style: preserve-3d;
    }

    .login-card {
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      background: var(--glass-effect);
      overflow: hidden;
      transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      transform-style: preserve-3d;
      position: relative;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.8);
    }

    .login-card:hover {
      transform: translateY(-10px) rotateX(1deg) rotateY(1deg);
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    }

    .login-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(
        135deg,
        rgba(255, 255, 255, 0.6) 0%,
        rgba(255, 255, 255, 0.3) 100%
      );
      z-index: -1;
      border-radius: var(--border-radius);
    }

    .login-header {
      background: linear-gradient(135deg, var(--primary), var(--primary-dark));
      color: var(--white);
      padding: 2.5rem;
      text-align: center;
      position: relative;
      overflow: hidden;
      clip-path: polygon(0 0, 100% 0, 100% 90%, 0 100%);
    }

    .login-header::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(
        to bottom right,
        rgba(255, 255, 255, 0.4) 0%,
        rgba(255, 255, 255, 0) 60%
      );
      transform: rotate(30deg);
      animation: shine 6s infinite;
    }

    @keyframes shine {
      0% {
        transform: rotate(30deg) translate(-30%, -30%);
      }
      100% {
        transform: rotate(30deg) translate(30%, 30%);
      }
    }

    .login-header h2 {
      font-weight: 600;
      margin-bottom: 0.5rem;
      font-size: 2rem;
      position: relative;
      animation: textGlow 3s infinite alternate;
      text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    @keyframes textGlow {
      from {
        text-shadow: 0 0 10px rgba(255, 255, 255, 0.4);
      }
      to {
        text-shadow: 0 0 20px rgba(255, 255, 255, 0.8);
      }
    }

    .login-header p {
      font-weight: 300;
      opacity: 0.9;
      position: relative;
      font-size: 1.1rem;
    }

    .login-body {
      padding: 2.5rem;
    }

    .form-group {
      margin-bottom: 1.8rem;
      position: relative;
    }

    .form-group label {
      display: block;
      margin-bottom: 0.8rem;
      font-weight: 500;
      color: var(--gray);
      transition: all 0.3s ease;
      font-size: 1rem;
    }

    .form-control {
      width: 100%;
      height: 55px;
      border-radius: var(--border-radius);
      border: 1px solid rgba(0, 0, 0, 0.1);
      padding: 0 20px;
      font-size: 1rem;
      transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      background: rgba(255, 255, 255, 0.8);
      box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
    }

    .form-control:focus {
      border-color: var(--primary-light);
      box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
      outline: none;
      transform: translateY(-3px);
      background: var(--white);
    }

    .form-control::placeholder {
      color: #adb5bd;
      opacity: 0.7;
    }

    .btn-login {
      background: linear-gradient(135deg, var(--primary), var(--primary-dark));
      color: white;
      border: none;
      height: 55px;
      border-radius: var(--border-radius);
      width: 100%;
      font-weight: 600;
      font-size: 1.1rem;
      cursor: pointer;
      transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      margin-top: 1rem;
      position: relative;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(67, 97, 238, 0.2);
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .btn-login::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        90deg,
        transparent,
        rgba(255, 255, 255, 0.4),
        transparent
      );
      transition: 0.6s;
    }

    .btn-login:hover {
      background: linear-gradient(135deg, var(--primary-dark), var(--primary));
      box-shadow: 0 8px 25px rgba(67, 97, 238, 0.4);
      transform: translateY(-3px);
    }

    .btn-login:active {
      transform: translateY(1px);
    }

    .btn-login:hover::before {
      left: 100%;
    }

    .signup-link {
      text-align: center;
      margin-top: 2rem;
      color: var(--gray);
      position: relative;
      font-size: 0.95rem;
    }

    .signup-link::before,
    .signup-link::after {
      content: '';
      position: absolute;
      top: 50%;
      width: 25%;
      height: 1px;
      background: linear-gradient(to right, transparent, rgba(0, 0, 0, 0.1), transparent);
    }

    .signup-link::before {
      left: 0;
    }

    .signup-link::after {
      right: 0;
    }

    .signup-link a {
      color: var(--primary);
      text-decoration: none;
      font-weight: 600;
      transition: all 0.3s ease;
      position: relative;
      padding: 0 5px;
    }

    .signup-link a::after {
      content: '';
      position: absolute;
      bottom: -2px;
      left: 0;
      width: 0;
      height: 2px;
      background: var(--primary-dark);
      transition: width 0.4s ease;
    }

    .signup-link a:hover {
      color: var(--primary-dark);
    }

    .signup-link a:hover::after {
      width: 100%;
    }

    /* Floating label effect */
    .form-group.focused label {
      transform: translateY(-25px);
      font-size: 0.85rem;
      color: var(--primary);
    }

    /* Ripple effect */
    .ripple {
      position: absolute;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.6);
      transform: scale(0);
      animation: ripple 0.6s linear;
      pointer-events: none;
    }

    @keyframes ripple {
      to {
        transform: scale(4);
        opacity: 0;
      }
    }

    /* Micro-interactions */
    @keyframes microBounce {
      0%, 100% {
        transform: translateY(0);
      }
      50% {
        transform: translateY(-5px);
      }
    }

    .micro-interaction {
      animation: microBounce 2s infinite ease-in-out;
    }

    /* Fade-in animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(30px) rotateX(10deg);
      }
      to {
        opacity: 1;
        transform: translateY(0) rotateX(0);
      }
    }

    /* Aurora Effect - Light Theme */
    .aurora {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -2;
      overflow: hidden;
    }

    .aurora-band {
      position: absolute;
      height: 200px;
      width: 200%;
      background: linear-gradient(90deg, 
        rgba(67, 97, 238, 0.05) 0%, 
        rgba(76, 201, 240, 0.1) 50%, 
        rgba(67, 97, 238, 0.05) 100%);
      border-radius: 50%;
      filter: blur(30px);
      animation: auroraFlow linear infinite;
      opacity: 0.5;
    }

    @keyframes auroraFlow {
      0% {
        transform: translateX(-50%);
      }
      100% {
        transform: translateX(0);
      }
    }

    /* Floating Orbs - Light Theme */
    .floating-orbs {
      position: absolute;
      width: 100%;
      height: 100%;
      z-index: -1;
    }

    .orb {
      position: absolute;
      border-radius: 50%;
      filter: blur(30px);
      opacity: 0.2;
      animation: orbFloat ease-in-out infinite;
    }

    @keyframes orbFloat {
      0%, 100% {
        transform: translate(0, 0);
      }
      50% {
        transform: translate(50px, 50px);
      }
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .login-container {
        max-width: 90%;
      }
      
      .login-header {
        padding: 2rem;
      }
      
      .login-body {
        padding: 2rem;
      }

      .signup-link::before,
      .signup-link::after {
        width: 20%;
      }
    }

    @media (max-width: 480px) {
      .login-header {
        padding: 1.8rem;
        clip-path: polygon(0 0, 100% 0, 100% 95%, 0 100%);
      }
      
      .login-body {
        padding: 1.8rem;
      }

      .signup-link::before,
      .signup-link::after {
        width: 15%;
      }
    }

    /* Additional decorative elements */
    .corner-decoration {
      position: absolute;
      width: 50px;
      height: 50px;
      border: 2px solid rgba(67, 97, 238, 0.1);
      border-radius: 5px;
    }

    .corner-decoration.top-left {
      top: 20px;
      left: 20px;
      border-right: none;
      border-bottom: none;
      animation: cornerFloat 8s infinite ease-in-out;
    }

    .corner-decoration.top-right {
      top: 20px;
      right: 20px;
      border-left: none;
      border-bottom: none;
      animation: cornerFloat 10s infinite ease-in-out;
    }

    .corner-decoration.bottom-left {
      bottom: 20px;
      left: 20px;
      border-right: none;
      border-top: none;
      animation: cornerFloat 12s infinite ease-in-out;
    }

    .corner-decoration.bottom-right {
      bottom: 20px;
      right: 20px;
      border-left: none;
      border-top: none;
      animation: cornerFloat 9s infinite ease-in-out;
    }

    @keyframes cornerFloat {
      0%, 100% {
        transform: translate(0, 0);
      }
      50% {
        transform: translate(5px, 5px);
      }
    }

    /* Glow effect for form */
    .form-glow {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      background: radial-gradient(circle at center, rgba(67, 97, 238, 0.05) 0%, transparent 70%);
      z-index: -1;
      opacity: 0;
      transition: opacity 0.5s ease;
    }

    .login-card:hover .form-glow {
      opacity: 0.5;
    }

    /* Subtle pulse animation */
    @keyframes subtlePulse {
      0%, 100% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.01);
      }
    }

    .login-card {
      animation: subtlePulse 15s infinite ease-in-out;
    }

    /* Water ripple effect */
    .water-ripple {
      position: absolute;
      border-radius: 50%;
      background: rgba(67, 97, 238, 0.1);
      transform: scale(0);
      animation: waterRipple 3s infinite;
      pointer-events: none;
      z-index: -1;
    }

    @keyframes waterRipple {
      to {
        transform: scale(2);
        opacity: 0;
      }
    }
  </style>
</head>
<body>
  <!-- Cosmic Background -->
  <div class="cosmic-bg">
    <div class="gradient-bg"></div>
  </div>

  <!-- Starfield Background -->
  <div class="starfield" id="starfield"></div>

  <!-- Aurora Effect -->
  <div class="aurora" id="aurora"></div>

  <!-- Floating Particles -->
  <div class="particles" id="particles"></div>

  <!-- Floating Bubbles -->
  <div class="bubbles" id="bubbles"></div>

  <!-- Floating Shapes -->
  <div class="floating-shapes" id="floatingShapes"></div>

  <!-- Light Rays -->
  <div class="light-rays" id="lightRays"></div>

  <!-- Meteor Shower -->
  <div class="meteor-shower" id="meteorShower"></div>

  <!-- Floating Orbs -->
  <div class="floating-orbs" id="floatingOrbs"></div>

  <div class="login-container">
    <div class="login-card">
      <!-- Corner Decorations -->
      <div class="corner-decoration top-left"></div>
      <div class="corner-decoration top-right"></div>
      <div class="corner-decoration bottom-left"></div>
      <div class="corner-decoration bottom-right"></div>
      
      <!-- Form Glow Effect -->
      <div class="form-glow"></div>

      <div class="login-header">
        <h2 class="micro-interaction">Alumni Portal</h2>
        <p>Welcome back! Please sign in to continue</p>
      </div>

      <div class="login-body">
        <form id="loginForm" action="/loginrout" method="post">
          <div class="form-group">
            <label for="yourUsername">Email Address</label>
            <input type="email" id="yourUsername" name="email" class="form-control" required placeholder="your@email.com">
          </div>

          <div class="form-group">
            <label for="yourPassword">Password</label>
            <input type="password" id="yourPassword" name="pass" class="form-control" required placeholder="••••••••">
          </div>

          <button type="submit" class="btn-login">Sign In</button>

          <div class="signup-link">
            Not signed up? <a href="/signup_page">Create an account</a>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Create starfield
      const starfield = document.getElementById('starfield');
      const starCount = 200;
      
      for (let i = 0; i < starCount; i++) {
        const star = document.createElement('div');
        star.classList.add('star');
        
        // Random properties
        const size = Math.random() * 2 + 0.5;
        const posX = Math.random() * 100;
        const posY = Math.random() * 100;
        const duration = Math.random() * 5 + 3;
        const delay = Math.random() * 5;
        
        star.style.width = `${size}px`;
        star.style.height = `${size}px`;
        star.style.left = `${posX}%`;
        star.style.top = `${posY}%`;
        star.style.animationDuration = `${duration}s`;
        star.style.animationDelay = `${delay}s`;
        star.style.setProperty('--duration', `${duration}s`);
        
        starfield.appendChild(star);
      }

      // Create aurora effect
      const aurora = document.getElementById('aurora');
      const auroraBandCount = 5;
      
      for (let i = 0; i < auroraBandCount; i++) {
        const band = document.createElement('div');
        band.classList.add('aurora-band');
        
        // Random properties
        const height = Math.random() * 200 + 100;
        const top = Math.random() * 100;
        const duration = Math.random() * 60 + 120;
        const delay = Math.random() * 30;
        const hue = 220 + Math.random() * 30 - 15;
        
        band.style.height = `${height}px`;
        band.style.top = `${top}%`;
        band.style.animationDuration = `${duration}s`;
        band.style.animationDelay = `${delay}s`;
        band.style.background = `linear-gradient(90deg, 
          hsla(${hue}, 80%, 60%, 0.05) 0%, 
          hsla(${hue}, 80%, 70%, 0.1) 50%, 
          hsla(${hue}, 80%, 60%, 0.05) 100%)`;
        
        aurora.appendChild(band);
      }

      // Create particles
      const particlesContainer = document.getElementById('particles');
      const particleCount = 50;
      
      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.classList.add('particle');
        
        // Random properties
        const size = Math.random() * 5 + 2;
        const posX = Math.random() * 100;
        const posY = Math.random() * 100;
        const delay = Math.random() * 10;
        const duration = Math.random() * 30 + 10;
        const opacity = Math.random() * 0.6 + 0.2;
        
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        particle.style.left = `${posX}%`;
        particle.style.top = `${posY}%`;
        particle.style.animationDelay = `${delay}s`;
        particle.style.animationDuration = `${duration}s`;
        particle.style.opacity = opacity;
        
        // Random color variation
        const hue = 220 + Math.random() * 30 - 15;
        particle.style.background = `radial-gradient(circle, 
          rgba(255,255,255,0.9) 0%, 
          hsla(${hue}, 80%, 70%, ${opacity * 0.5}) 70%)`;
        
        particlesContainer.appendChild(particle);
      }

      // Create bubbles
      const bubblesContainer = document.getElementById('bubbles');
      const bubbleCount = 15;
      
      for (let i = 0; i < bubbleCount; i++) {
        const bubble = document.createElement('div');
        bubble.classList.add('bubble');
        
        // Random properties
        const size = Math.random() * 100 + 50;
        const posX = Math.random() * 100;
        const delay = Math.random() * 15;
        const duration = Math.random() * 30 + 20;
        
        bubble.style.width = `${size}px`;
        bubble.style.height = `${size}px`;
        bubble.style.left = `${posX}%`;
        bubble.style.animationDelay = `${delay}s`;
        bubble.style.animationDuration = `${duration}s`;
        
        bubblesContainer.appendChild(bubble);
      }

      // Create floating shapes
      const shapesContainer = document.getElementById('floatingShapes');
      const shapeCount = 8;
      const shapeTypes = ['triangle', 'circle', 'square'];
      
      for (let i = 0; i < shapeCount; i++) {
        const shape = document.createElement('div');
        const type = shapeTypes[Math.floor(Math.random() * shapeTypes.length)];
        shape.classList.add('shape', type);
        
        // Random properties
        const posX = Math.random() * 100;
        const posY = Math.random() * 100 + 100;
        const delay = Math.random() * 10;
        const duration = Math.random() * 60 + 30;
        const opacity = Math.random() * 0.15 + 0.05;
        
        shape.style.left = `${posX}%`;
        shape.style.top = `${posY}%`;
        shape.style.animationDelay = `${delay}s`;
        shape.style.animationDuration = `${duration}s`;
        shape.style.opacity = opacity;
        
        shapesContainer.appendChild(shape);
      }

      // Create light rays
      const raysContainer = document.getElementById('lightRays');
      const rayCount = 8;
      
      for (let i = 0; i < rayCount; i++) {
        const ray = document.createElement('div');
        ray.classList.add('light-ray');
        
        // Random properties
        const posX = Math.random() * 100;
        const delay = Math.random() * 5;
        const duration = Math.random() * 60 + 120;
        const opacity = Math.random() * 0.1 + 0.05;
        
        ray.style.left = `${posX}%`;
        ray.style.animationDelay = `${delay}s`;
        ray.style.animationDuration = `${duration}s`;
        ray.style.opacity = opacity;
        
        raysContainer.appendChild(ray);
      }

      // Create meteor shower
      const meteorContainer = document.getElementById('meteorShower');
      const meteorCount = 5;
      
      for (let i = 0; i < meteorCount; i++) {
        const meteor = document.createElement('div');
        meteor.classList.add('meteor');
        
        // Random properties
        const posX = Math.random() * 100;
        const posY = Math.random() * 100;
        const delay = Math.random() * 20;
        const duration = Math.random() * 5 + 1;
        const size = Math.random() * 3 + 1;
        
        meteor.style.left = `${posX}%`;
        meteor.style.top = `${posY}%`;
        meteor.style.animationDelay = `${delay}s`;
        meteor.style.animationDuration = `${duration}s`;
        meteor.style.width = `${size}px`;
        meteor.style.height = `${size}px`;
        
        meteorContainer.appendChild(meteor);
      }

      // Create floating orbs
      const orbsContainer = document.getElementById('floatingOrbs');
      const orbCount = 5;
      
      for (let i = 0; i < orbCount; i++) {
        const orb = document.createElement('div');
        orb.classList.add('orb');
        
        // Random properties
        const size = Math.random() * 300 + 100;
        const posX = Math.random() * 100;
        const posY = Math.random() * 100;
        const delay = Math.random() * 10;
        const duration = Math.random() * 30 + 20;
        const hue = 220 + Math.random() * 40 - 20;
        
        orb.style.width = `${size}px`;
        orb.style.height = `${size}px`;
        orb.style.left = `${posX}%`;
        orb.style.top = `${posY}%`;
        orb.style.animationDelay = `${delay}s`;
        orb.style.animationDuration = `${duration}s`;
        orb.style.background = `radial-gradient(circle, 
          hsla(${hue}, 80%, 70%, 0.2) 0%, 
          hsla(${hue}, 80%, 60%, 0.1) 100%)`;
        
        orbsContainer.appendChild(orb);
      }

      // Add ripple effect to login button
      const loginBtn = document.querySelector('.btn-login');
      if (loginBtn) {
        loginBtn.addEventListener('click', function(e) {
          const x = e.clientX - e.target.getBoundingClientRect().left;
          const y = e.clientY - e.target.getBoundingClientRect().top;
          
          const ripple = document.createElement('span');
          ripple.classList.add('ripple');
          ripple.style.left = `${x}px`;
          ripple.style.top = `${y}px`;
          
          this.appendChild(ripple);
          
          setTimeout(() => {
            ripple.remove();
          }, 1000);
        });
      }

      // Add water ripple effect to the card randomly
      const loginCard = document.querySelector('.login-card');
      setInterval(() => {
        const ripple = document.createElement('div');
        ripple.classList.add('water-ripple');
        
        // Random position within the card
        const x = Math.random() * 80 + 10;
        const y = Math.random() * 80 + 10;
        
        ripple.style.left = `${x}%`;
        ripple.style.top = `${y}%`;
        
        loginCard.appendChild(ripple);
        
        setTimeout(() => {
          ripple.remove();
        }, 3000);
      }, 5000);

      // Add focus effects to form inputs
      const inputs = document.querySelectorAll('.form-control');
      inputs.forEach(input => {
        const formGroup = input.closest('.form-group');
        
        input.addEventListener('focus', () => {
          formGroup.classList.add('focused');
        });
        
        input.addEventListener('blur', () => {
          if (!input.value) {
            formGroup.classList.remove('focused');
          }
        });
      });

      // Mouse move parallax effect
      document.addEventListener('mousemove', function(e) {
        const x = e.clientX / window.innerWidth;
        const y = e.clientY / window.innerHeight;
        
        // Move gradient background
        const gradientBg = document.querySelector('.gradient-bg');
        gradientBg.style.transform = `translate(${x * 20 - 10}px, ${y * 20 - 10}px)`;
        
        // Move particles slightly
        const particles = document.querySelectorAll('.particle');
        particles.forEach(particle => {
          const speed = parseFloat(particle.style.animationDuration) / 30;
          particle.style.transform = `translate(${x * speed * 10}px, ${y * speed * 10}px)`;
        });
        
        // Move orbs slightly
        const orbs = document.querySelectorAll('.orb');
        orbs.forEach(orb => {
          const speed = parseFloat(orb.style.animationDuration) / 100;
          orb.style.transform = `translate(${x * speed * 20}px, ${y * speed * 20}px)`;
        });
      });

      // Add floating islands effect
      const islandsContainer = document.createElement('div');
      islandsContainer.classList.add('floating-islands');
      document.body.appendChild(islandsContainer);
      
      const islandCount = 3;
      for (let i = 0; i < islandCount; i++) {
        const island = document.createElement('div');
        island.classList.add('island');
        
        // Random properties
        const size = Math.random() * 200 + 100;
        const posX = Math.random() * 100;
        const posY = Math.random() * 100 + 50;
        const delay = Math.random() * 10;
        const duration = Math.random() * 30 + 20;
        
        island.style.width = `${size}px`;
        island.style.height = `${size}px`;
        island.style.left = `${posX}%`;
        island.style.top = `${posY}%`;
        island.style.animationDelay = `${delay}s`;
        island.style.animationDuration = `${duration}s`;
        
        // Random shape
        if (Math.random() > 0.5) {
          island.style.backgroundImage = 'url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 100 50\'><path d=\'M0,50 Q25,0 50,50 Q75,100 100,50 Z\' fill=\'%234361ee\'/></svg>")';
        } else {
          island.style.backgroundImage = 'url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 100 50\'><path d=\'M0,50 Q25,10 50,50 Q75,90 100,50 Z\' fill=\'%234cc9f0\'/></svg>")';
        }
        
        islandsContainer.appendChild(island);
      }
    });
  </script>
</body>
</html>