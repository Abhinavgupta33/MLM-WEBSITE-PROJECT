<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Alumni Portal | Login</title>
  
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Animate.css -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: #4cc9f0;
      --primary-dark: #3a56d4;
      --secondary: #f72585;
      --success: #4cc9f0;
      --white: #ffffff;
      --light: #f8f9fa;
      --lighter: #f1f3f5;
      --gray: #6c757d;
      --light-gray: #e9ecef;
      --dark-gray: #495057;
      --border-radius: 16px;
      --border-radius-sm: 8px;
      --box-shadow: 0 15px 30px -5px rgba(0, 0, 0, 0.1);
      --box-shadow-lg: 0 25px 50px -12px rgba(0, 0, 0, 0.15);
      --transition: all 0.4s cubic-bezier(0.25, 1, 0.5, 1);
      --transition-fast: all 0.2s ease;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(135deg, var(--light) 0%, var(--lighter) 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      padding: 20px;
      position: relative;
      overflow: hidden;
      color: var(--dark-gray);
    }

    /* Enhanced Quantum Bubble Particles */
    .quantum-bubble {
      position: absolute;
      border-radius: 50%;
      background: radial-gradient(circle at center, 
                  rgba(76, 201, 240, 0.8) 0%, 
                  rgba(76, 201, 240, 0.4) 70%, 
                  transparent 100%);
      box-shadow: 0 0 15px 5px rgba(76, 201, 240, 0.3);
      opacity: 0;
      z-index: -1;
      filter: blur(1px);
      animation: bubble-float linear infinite;
      transform-style: preserve-3d;
      will-change: transform, opacity;
      pointer-events: none;
    }

    @keyframes bubble-float {
      0% {
        transform: translate3d(0, 0, 0) scale(0.2);
        opacity: 0;
      }
      20% {
        opacity: 0.8;
      }
      80% {
        opacity: 0.6;
      }
      100% {
        transform: translate3d(var(--tx, 200px), var(--ty, 200px), 0) scale(1.5);
        opacity: 0;
      }
    }

    /* Bubble pulse effect */
    @keyframes bubble-pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.2); }
    }

    /* Holographic grid background - Lighter version */
    .holographic-grid {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: 
        linear-gradient(rgba(67, 97, 238, 0.03) 1px, transparent 1px),
        linear-gradient(90deg, rgba(67, 97, 238, 0.03) 1px, transparent 1px);
      background-size: 40px 40px;
      z-index: -2;
      animation: grid-pulse 12s infinite alternate;
      opacity: 0.5;
    }

    @keyframes grid-pulse {
      0%, 100% { opacity: 0.3; }
      50% { opacity: 0.7; }
    }

    /* Floating bubbles decoration - Enhanced */
    .floating-bubble {
      position: absolute;
      border-radius: 50%;
      filter: blur(30px);
      opacity: 0.2;
      z-index: -1;
      animation: float 15s infinite ease-in-out, bubble-pulse 8s infinite ease-in-out;
      transform-style: preserve-3d;
      will-change: transform, opacity;
      pointer-events: none;
    }

    .bubble-1 {
      width: 300px;
      height: 300px;
      background: radial-gradient(circle at 30% 30%, var(--primary), var(--primary-dark));
      top: -50px;
      left: -50px;
      animation-delay: 0s;
    }

    .bubble-2 {
      width: 400px;
      height: 400px;
      background: radial-gradient(circle at 70% 30%, var(--primary-light), var(--success));
      bottom: -100px;
      right: -100px;
      animation-delay: 2s;
    }

    .bubble-3 {
      width: 250px;
      height: 250px;
      background: radial-gradient(circle at 50% 70%, var(--secondary), #f72585cc);
      top: 30%;
      right: 10%;
      animation-delay: 4s;
    }

    .bubble-4 {
      width: 350px;
      height: 350px;
      background: radial-gradient(circle at 40% 60%, #7209b7, #3a0ca3);
      bottom: 20%;
      left: 10%;
      animation-delay: 1s;
    }

    @keyframes float {
      0%, 100% { transform: translate(0, 0) rotate(0deg); }
      25% { transform: translate(10px, 15px) rotate(5deg); }
      50% { transform: translate(20px, 5px) rotate(-5deg); }
      75% { transform: translate(15px, 10px) rotate(3deg); }
    }

    /* Main login container - Enhanced reveal with depth */
    .login-container {
      max-width: 500px;
      width: 100%;
      perspective: 1200px;
      opacity: 0;
      transform: scale(0.9) rotateY(15deg);
      animation: cyberpunk-reveal 1.2s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.3s forwards;
      will-change: transform, opacity;
    }

    @keyframes cyberpunk-reveal {
      0% {
        opacity: 0;
        transform: scale(0.9) rotateY(15deg) translateY(30px);
        filter: blur(5px);
      }
      60% {
        filter: blur(0);
      }
      100% {
        opacity: 1;
        transform: scale(1) rotateY(0) translateY(0);
      }
    }

    /* Glass card with enhanced depth effect */
    .login-card {
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow-lg);
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(12px);
      -webkit-backdrop-filter: blur(12px);
      overflow: hidden;
      transition: var(--transition);
      transform-style: preserve-3d;
      position: relative;
      border: 1px solid rgba(255, 255, 255, 0.5);
      transform: translateZ(0);
      will-change: transform, box-shadow;
    }

    /* Subtle scanline effect */
    .login-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        to bottom,
        transparent 95%,
        rgba(76, 201, 240, 0.08) 96%,
        transparent 97%
      );
      background-size: 100% 10px;
      pointer-events: none;
      animation: scanline 8s linear infinite;
      z-index: 2;
      opacity: 0.5;
    }

    /* Subtle gradient overlay */
    .login-card::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        135deg,
        rgba(255, 255, 255, 0.1) 0%,
        rgba(255, 255, 255, 0) 50%,
        rgba(255, 255, 255, 0.1) 100%
      );
      pointer-events: none;
      z-index: 1;
      opacity: 0.3;
    }

    @keyframes scanline {
      0% { background-position: 0 0; }
      100% { background-position: 0 100%; }
    }

    /* Hover effect with 3D tilt and depth */
    .login-card:hover {
      transform: translateY(-8px) rotateX(1deg) rotateY(1deg) translateZ(20px);
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15), 
                  0 0 0 1px rgba(76, 201, 240, 0.3),
                  0 0 20px rgba(76, 201, 240, 0.1);
    }

    /* Header with subtle digital effect */
    .login-header {
      background: linear-gradient(135deg, var(--primary), var(--primary-dark));
      color: var(--white);
      padding: 2.5rem;
      text-align: center;
      position: relative;
      overflow: hidden;
      transform: translateZ(40px);
    }

    /* Digital rain effect - more subtle */
    .login-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        to bottom,
        transparent 0%,
        rgba(255, 255, 255, 0.05) 50%,
        transparent 100%
      );
      animation: digital-rain 6s linear infinite;
      opacity: 0.4;
    }

    @keyframes digital-rain {
      0% { transform: translateY(-100%); }
      100% { transform: translateY(100%); }
    }

    /* Header content with glitch effect */
    .login-header h2 {
      font-weight: 600;
      margin-bottom: 0.5rem;
      font-size: 2rem;
      position: relative;
      animation: text-glitch 1s cubic-bezier(0.25, 1, 0.5, 1) both;
      text-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    @keyframes text-glitch {
      0% {
        opacity: 0;
        transform: translateY(-10px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .login-header p {
      font-weight: 300;
      opacity: 0.9;
      font-size: 0.95rem;
      position: relative;
      animation: fade-in 1s 0.3s cubic-bezier(0.25, 1, 0.5, 1) both;
    }

    /* Login body with floating inputs */
    .login-body {
      padding: 2.5rem;
      position: relative;
      transform: translateZ(20px);
    }

    .form-group {
      margin-bottom: 1.8rem;
      position: relative;
      animation: input-appear 1s 0.5s cubic-bezier(0.25, 1, 0.5, 1) both;
    }

    @keyframes input-appear {
      0% {
        opacity: 0;
        transform: translateY(20px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .input-container {
      position: relative;
      transition: var(--transition);
      transform-style: preserve-3d;
      will-change: transform;
    }

    .input-container:hover {
      transform: translateY(-3px) translateZ(5px);
    }

    /* Input field styling */
    .form-control {
      width: 100%;
      height: 56px;
      border-radius: var(--border-radius-sm);
      border: none;
      padding: 0 55px 0 20px;
      font-size: 0.95rem;
      transition: var(--transition-fast);
      background: rgba(233, 236, 239, 0.5);
      box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
      font-weight: 500;
      border: 1px solid rgba(0, 0, 0, 0.08);
      color: var(--dark-gray);
      transform: translateZ(0);
      will-change: transform, box-shadow;
    }

    .form-control:focus {
      background: var(--white);
      box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.2), 
                  inset 0 1px 3px rgba(0, 0, 0, 0.05);
      outline: none;
      border-color: rgba(67, 97, 238, 0.3);
      transform: translateZ(5px);
    }

    .form-control::placeholder {
      color: var(--gray);
      opacity: 0.6;
      font-weight: 400;
    }

    /* Input icon styling */
    .input-icon {
      position: absolute;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--gray);
      transition: var(--transition-fast);
      pointer-events: none;
      font-size: 1.1rem;
      transform-style: preserve-3d;
    }

    .form-control:focus ~ .input-icon {
      color: var(--primary);
      animation: icon-float 1.5s infinite alternate;
    }

    @keyframes icon-float {
      0% { 
        transform: translateY(-50%) translateZ(0);
      }
      100% { 
        transform: translateY(-55%) translateZ(3px);
      }
    }

    /* Password visibility toggle */
    .password-toggle {
      position: absolute;
      right: 50px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--gray);
      cursor: pointer;
      transition: var(--transition-fast);
      font-size: 1rem;
      opacity: 0.6;
      z-index: 2;
    }

    .password-toggle:hover {
      opacity: 1;
      color: var(--primary);
    }

    /* Remember me checkbox */
    .remember-me {
      display: flex;
      align-items: center;
      margin: 1.5rem 0;
      position: relative;
      cursor: pointer;
      user-select: none;
      animation: fade-in 1s 0.7s both;
    }

    .remember-me input {
      position: absolute;
      opacity: 0;
      cursor: pointer;
      height: 0;
      width: 0;
    }

    .checkmark {
      position: relative;
      height: 18px;
      width: 18px;
      background-color: rgba(233, 236, 239, 0.5);
      border-radius: 4px;
      transition: var(--transition-fast);
      margin-right: 10px;
      border: 1px solid rgba(0, 0, 0, 0.1);
    }

    .remember-me:hover .checkmark {
      background-color: rgba(233, 236, 239, 0.8);
    }

    .remember-me input:checked ~ .checkmark {
      background-color: var(--primary);
      border-color: var(--primary);
    }

    .checkmark:after {
      content: "";
      position: absolute;
      display: none;
      left: 6px;
      top: 2px;
      width: 5px;
      height: 10px;
      border: solid white;
      border-width: 0 2px 2px 0;
      transform: rotate(45deg);
    }

    .remember-me input:checked ~ .checkmark:after {
      display: block;
    }

    .remember-me-label {
      font-size: 0.9rem;
      color: var(--gray);
    }

    /* Forgot password link */
    .forgot-password {
      text-align: right;
      margin-top: -1.8rem;
      margin-bottom: 1.5rem;
      animation: fade-in 1s 0.7s both;
    }

    .forgot-password a {
      color: var(--gray);
      font-size: 0.85rem;
      text-decoration: none;
      transition: var(--transition-fast);
    }

    .forgot-password a:hover {
      color: var(--primary);
    }

    /* Login button with enhanced effects */
    .btn-login {
      background: linear-gradient(135deg, var(--primary), var(--primary-dark));
      color: white;
      border: none;
      height: 56px;
      border-radius: var(--border-radius-sm);
      width: 100%;
      font-weight: 600;
      font-size: 1rem;
      cursor: pointer;
      transition: var(--transition);
      margin-top: 0.5rem;
      position: relative;
      overflow: hidden;
      animation: btn-appear 1s 0.7s cubic-bezier(0.25, 1, 0.5, 1) both;
      box-shadow: 0 8px 20px rgba(67, 97, 238, 0.3);
      text-transform: uppercase;
      letter-spacing: 0.5px;
      transform-style: preserve-3d;
      z-index: 1;
      will-change: transform, box-shadow;
    }

    @keyframes btn-appear {
      0% {
        opacity: 0;
        transform: translateY(20px) scale(0.95);
      }
      100% {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }

    .btn-login:hover {
      background: linear-gradient(135deg, var(--primary-dark), var(--primary));
      box-shadow: 0 12px 25px rgba(67, 97, 238, 0.4);
      transform: translateY(-3px) translateZ(5px);
    }

    .btn-login:active {
      transform: translateY(1px) translateZ(0);
      box-shadow: 0 5px 15px rgba(67, 97, 238, 0.3);
    }

    /* Button shine effect */
    .btn-login::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        90deg, 
        transparent, 
        rgba(255, 255, 255, 0.2), 
        transparent
      );
      transition: 0.6s;
      z-index: -1;
    }

    .btn-login:hover::before {
      left: 100%;
    }

    .btn-content {
      position: relative;
      z-index: 2;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
    }

    /* Social login options */
    .social-login {
      margin: 2rem 0;
      text-align: center;
      position: relative;
      animation: fade-in 1s 0.9s both;
    }

    .social-login p {
      color: var(--gray);
      font-size: 0.9rem;
      margin-bottom: 1rem;
      position: relative;
    }

    .social-login p::before,
    .social-login p::after {
      content: '';
      position: absolute;
      top: 50%;
      width: 30%;
      height: 1px;
      background: rgba(0, 0, 0, 0.1);
    }

    .social-login p::before {
      left: 0;
    }

    .social-login p::after {
      right: 0;
    }

    .social-icons {
      display: flex;
      justify-content: center;
      gap: 15px;
    }

    .social-icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--white);
      color: var(--gray);
      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
      transition: var(--transition-fast);
      border: 1px solid rgba(0, 0, 0, 0.05);
    }

    .social-icon:hover {
      transform: translateY(-3px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .social-icon.facebook:hover {
      color: #1877f2;
      background: rgba(24, 119, 242, 0.1);
    }

    .social-icon.google:hover {
      color: #ea4335;
      background: rgba(234, 67, 53, 0.1);
    }

    .social-icon.linkedin:hover {
      color: #0a66c2;
      background: rgba(10, 102, 194, 0.1);
    }

    /* Signup link with enhanced effect */
    .signup-link {
      text-align: center;
      margin-top: 1.5rem;
      color: var(--gray);
      font-size: 0.95rem;
      animation: fade-in 1s 1s both;
    }

    .signup-link a {
      color: var(--primary);
      text-decoration: none;
      font-weight: 500;
      transition: var(--transition-fast);
      position: relative;
    }

    .signup-link a::before {
      content: '';
      position: absolute;
      bottom: -2px;
      left: 0;
      width: 0;
      height: 1px;
      background: var(--primary);
      transition: var(--transition-fast);
    }

    .signup-link a:hover::before {
      width: 100%;
    }

    /* Status message styling */
    .status-message {
      padding: 12px 20px;
      border-radius: var(--border-radius-sm);
      margin-bottom: 1.5rem;
      font-size: 0.9rem;
      display: flex;
      align-items: center;
      animation: slide-down 0.5s ease-out;
      transform-origin: top;
    }

    @keyframes slide-down {
      0% {
        opacity: 0;
        transform: translateY(-20px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .status-message.error {
      background: rgba(220, 53, 69, 0.1);
      color: #dc3545;
      border-left: 3px solid #dc3545;
    }

    .status-message.success {
      background: rgba(25, 135, 84, 0.1);
      color: #198754;
      border-left: 3px solid #198754;
    }

    .status-message i {
      margin-right: 10px;
    }

    /* Loading spinner */
    .spinner {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 3px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: var(--white);
      animation: spin 1s ease-in-out infinite;
      margin-right: 10px;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    /* Responsive adjustments */
    @media (max-width: 600px) {
      .login-container {
        max-width: 100%;
      }
      
      .login-header {
        padding: 2rem 1.5rem;
      }
      
      .login-body {
        padding: 2rem 1.5rem;
      }
      
      .bubble-1, .bubble-2, .bubble-3, .bubble-4 {
        display: none;
      }
    }

    /* Accessibility focus styles */
    .form-control:focus-visible,
    .btn-login:focus-visible,
    .social-icon:focus-visible,
    .password-toggle:focus-visible {
      outline: 2px solid var(--primary);
      outline-offset: 2px;
    }

    /* Utility classes */
    .hidden {
      display: none !important;
    }

    @keyframes fade-in {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    /* Enhanced bubble animations */
    @keyframes bubble-rise {
      0% {
        transform: translateY(0) scale(0.8);
        opacity: 0;
      }
      20% {
        opacity: 0.8;
      }
      100% {
        transform: translateY(-100vh) scale(1.2);
        opacity: 0;
      }
    }

    @keyframes bubble-orbital {
      0% {
        transform: rotate(0deg) translateX(100px) rotate(0deg) scale(0.8);
        opacity: 0;
      }
      50% {
        opacity: 0.8;
        transform: rotate(180deg) translateX(100px) rotate(-180deg) scale(1);
      }
      100% {
        transform: rotate(360deg) translateX(100px) rotate(-360deg) scale(0.8);
        opacity: 0;
      }
    }
  </style>
</head>
<body>
  <!-- Background elements -->
  <div class="holographic-grid"></div>
  <div class="floating-bubble bubble-1"></div>
  <div class="floating-bubble bubble-2"></div>
  <div class="floating-bubble bubble-3"></div>
  <div class="floating-bubble bubble-4"></div>
  
  <!-- Quantum bubbles will be added by JavaScript -->
  
  <div class="login-container">
    <div class="login-card">
      <div class="login-header">
        <h2><i class="fas fa-graduation-cap"></i> Alumni Portal</h2>
        <p>Connect with your alma mater and fellow graduates</p>
      </div>

      <div class="login-body">
        <!-- Status message container (initially hidden) -->
        <div id="statusMessage" class="status-message hidden"></div>
        
        <form id="loginForm" novalidate>
          <div class="form-group">
            <div class="input-container">
              <input type="email" id="email" name="email" class="form-control" required placeholder="Email Address">
              <i class="fas fa-envelope input-icon"></i>
            </div>
          </div>

          <div class="form-group">
            <div class="input-container">
              <input type="password" id="password" name="password" class="form-control" required placeholder="Password" minlength="6">
              <i class="fas fa-lock input-icon"></i>
              <span class="password-toggle" id="togglePassword">
                <i class="far fa-eye"></i>
              </span>
            </div>
          </div>

          <div class="remember-me">
            <input type="checkbox" id="remember" name="remember">
            <span class="checkmark"></span>
            <span class="remember-me-label">Remember me</span>
          </div>

          <div class="forgot-password">
            <a href="/forgot-password">Forgot password?</a>
          </div>

          <button type="submit" class="btn-login" id="loginButton">
            <span class="btn-content">
              <span id="buttonText">Sign In</span>
            </span>
          </button>

          <div class="social-login">
            <p>Or sign in with</p>
            <div class="social-icons">
              <a href="#" class="social-icon facebook" aria-label="Sign in with Facebook">
                <i class="fab fa-facebook-f"></i>
              </a>
              <a href="#" class="social-icon google" aria-label="Sign in with Google">
                <i class="fab fa-google"></i>
              </a>
              <a href="#" class="social-icon linkedin" aria-label="Sign in with LinkedIn">
                <i class="fab fa-linkedin-in"></i>
              </a>
            </div>
          </div>

          <div class="signup-link">
            Not an alumni yet? <a href="/signup">Register now</a>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Enhanced quantum bubbles with multiple animation types
    function createQuantumBubbles() {
      const colors = [
        'rgba(67, 97, 238, 0.7)',
        'rgba(76, 201, 240, 0.7)',
        'rgba(58, 86, 212, 0.7)',
        'rgba(247, 37, 133, 0.7)',
        'rgba(114, 9, 183, 0.7)'
      ];
      const body = document.body;
      const bubbleCount = Math.min(Math.floor(window.innerWidth / 10), 60); // Limit to 60 bubbles
      
      // Remove existing bubbles if any
      document.querySelectorAll('.quantum-bubble').forEach(el => el.remove());
      
      for (let i = 0; i < bubbleCount; i++) {
        const bubble = document.createElement('div');
        bubble.className = 'quantum-bubble';
        
        // Random properties with enhanced effects
        const size = Math.random() * 20 + 10;
        const posX = Math.random() * 100;
        const posY = Math.random() * 100;
        const tx = (Math.random() - 0.5) * 300;
        const ty = (Math.random() - 0.5) * 300;
        const duration = Math.random() * 15 + 10; // Longer duration
        const delay = Math.random() * 10;
        const color = colors[Math.floor(Math.random() * colors.length)];
        const zIndex = Math.floor(Math.random() * 5) - 2;
        const opacity = Math.random() * 0.4 + 0.1;
        const animationType = Math.random() > 0.5 ? 'bubble-float' : 'bubble-rise';
        const animationCurve = Math.random() > 0.5 ? 'ease-in-out' : 'linear';
        
        bubble.style.width = `${size}px`;
        bubble.style.height = `${size}px`;
        bubble.style.left = `${posX}%`;
        bubble.style.top = `${posY}%`;
        bubble.style.setProperty('--tx', `${tx}px`);
        bubble.style.setProperty('--ty', `${ty}px`);
        bubble.style.animation = `${animationType} ${duration}s ${animationCurve} ${delay}s infinite`;
        bubble.style.backgroundColor = color;
        bubble.style.zIndex = zIndex;
        bubble.style.opacity = opacity;
        bubble.style.willChange = 'transform, opacity';
        
        // Add glow effect
        bubble.style.boxShadow = `0 0 ${size/2}px ${size/4}px ${color.replace('0.7', '0.3')}`;
        
        // Random bubble shape variation
        if (Math.random() > 0.7) {
          bubble.style.borderRadius = '30% 70% 70% 30% / 30% 30% 70% 70%';
        }
        
        body.appendChild(bubble);
      }
      
      // Create some orbital bubbles around the login card
      createOrbitalBubbles();
    }
    
    // Create orbital bubbles that circle around the login card
    function createOrbitalBubbles() {
      const loginCard = document.querySelector('.login-card');
      if (!loginCard) return;
      
      const cardRect = loginCard.getBoundingClientRect();
      const centerX = cardRect.left + cardRect.width / 2;
      const centerY = cardRect.top + cardRect.height / 2;
      const radius = Math.max(cardRect.width, cardRect.height) * 0.8;
      
      for (let i = 0; i < 8; i++) {
        const bubble = document.createElement('div');
        bubble.className = 'quantum-bubble orbital-bubble';
        
        const size = Math.random() * 15 + 10;
        const angle = (i * 45) * (Math.PI / 180);
        const startX = centerX + Math.cos(angle) * radius - size/2;
        const startY = centerY + Math.sin(angle) * radius - size/2;
        const duration = Math.random() * 20 + 20;
        const delay = Math.random() * 5;
        const color = `rgba(${Math.floor(Math.random() * 100 + 155)}, 
                          ${Math.floor(Math.random() * 100 + 155)}, 
                          ${Math.floor(Math.random() * 100 + 155)}, 0.6)`;
        
        bubble.style.width = `${size}px`;
        bubble.style.height = `${size}px`;
        bubble.style.left = `${startX}px`;
        bubble.style.top = `${startY}px`;
        bubble.style.animation = `bubble-orbital ${duration}s linear ${delay}s infinite`;
        bubble.style.backgroundColor = color;
        bubble.style.zIndex = '-1';
        bubble.style.opacity = '0.5';
        bubble.style.boxShadow = `0 0 ${size}px ${size/2}px ${color.replace('0.6', '0.2')}`;
        
        document.body.appendChild(bubble);
      }
    }

    // Password visibility toggle
    document.getElementById('togglePassword').addEventListener('click', function() {
      const passwordInput = document.getElementById('password');
      const icon = this.querySelector('i');
      
      if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
      } else {
        passwordInput.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
      }
    });

    // Form validation
    document.getElementById('loginForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const email = document.getElementById('email');
      const password = document.getElementById('password');
      const loginButton = document.getElementById('loginButton');
      const buttonText = document.getElementById('buttonText');
      const statusMessage = document.getElementById('statusMessage');
      
      // Reset status message
      statusMessage.className = 'status-message hidden';
      
      // Validate inputs
      if (!email.value || !password.value) {
        showStatusMessage('Please fill in all fields', 'error');
        return;
      }
      
      if (!validateEmail(email.value)) {
        showStatusMessage('Please enter a valid email address', 'error');
        return;
      }
      
      if (password.value.length < 6) {
        showStatusMessage('Password must be at least 6 characters', 'error');
        return;
      }
      
      // Start authentication process
      loginButton.disabled = true;
      buttonText.innerHTML = '<span class="spinner"></span> Authenticating';
      
      // Simulate API call (replace with actual fetch)
      setTimeout(() => {
        // This is where you would normally make an actual API call
        // For demo purposes, we're simulating a successful login after 2 seconds
        simulateLogin(email.value, password.value);
      }, 2000);
    });
    
    // Email validation helper
    function validateEmail(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email);
    }
    
    // Show status message
    function showStatusMessage(message, type) {
      const statusMessage = document.getElementById('statusMessage');
      statusMessage.textContent = message;
      statusMessage.className = `status-message ${type}`;
      statusMessage.innerHTML = `<i class="fas ${type === 'error' ? 'fa-exclamation-circle' : 'fa-check-circle'}"></i> ${message}`;
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        statusMessage.classList.add('hidden');
      }, 5000);
    }
    
    // Simulate login (replace with actual API call)
    function simulateLogin(email, password) {
      const loginButton = document.getElementById('loginButton');
      const buttonText = document.getElementById('buttonText');
      const statusMessage = document.getElementById('statusMessage');
      
      // This is just for demonstration - in a real app, you would:
      // 1. Make an API call to your authentication endpoint
      // 2. Handle the response appropriately
      
      // For demo purposes, we'll randomly succeed or fail
      const isSuccess = Math.random() > 0.2; // 80% chance of success
      
      if (isSuccess) {
        // Success case
        buttonText.innerHTML = '<i class="fas fa-check"></i> Success';
        showStatusMessage('Login successful! Redirecting...', 'success');
        
        // Create success bubbles
        createSuccessBubbles(loginButton);
        
        // Redirect after a delay (in a real app, you might get a token first)
        setTimeout(() => {
          window.location.href = '/dashboard'; // Replace with your actual dashboard URL
        }, 1500);
      } else {
        // Error case
        loginButton.disabled = false;
        buttonText.textContent = 'Sign In';
        showStatusMessage('Invalid email or password', 'error');
        
        // Create error bubbles
        createErrorBubbles(loginButton);
      }
    }
    
    // Create success bubbles effect
    function createSuccessBubbles(element) {
      const rect = element.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;
      
      for (let i = 0; i < 30; i++) {
        const bubble = document.createElement('div');
        bubble.className = 'success-bubble';
        
        const size = Math.random() * 15 + 5;
        const angle = Math.random() * Math.PI * 2;
        const distance = Math.random() * 100 + 50;
        const duration = Math.random() * 1.5 + 0.5;
        const delay = Math.random() * 0.5;
        const color = `rgba(76, 201, 240, ${Math.random() * 0.5 + 0.3})`;
        
        bubble.style.width = `${size}px`;
        bubble.style.height = `${size}px`;
        bubble.style.background = color;
        bubble.style.borderRadius = '50%';
        bubble.style.position = 'fixed';
        bubble.style.left = `${centerX}px`;
        bubble.style.top = `${centerY}px`;
        bubble.style.opacity = '0.8';
        bubble.style.filter = 'blur(1px)';
        bubble.style.transform = `translate(${Math.cos(angle) * distance}px, ${Math.sin(angle) * distance}px)`;
        bubble.style.animation = `success-bubble-fade ${duration}s ease-out ${delay}s forwards, bubble-pulse ${duration/2}s ease-in-out infinite`;
        bubble.style.zIndex = '1000';
        bubble.style.pointerEvents = 'none';
        bubble.style.willChange = 'transform, opacity';
        bubble.style.boxShadow = `0 0 ${size}px ${size/2}px rgba(76, 201, 240, 0.3)`;
        
        document.body.appendChild(bubble);
        
        // Remove bubble after animation
        setTimeout(() => {
          bubble.remove();
        }, (duration + delay) * 1000);
      }
    }
    
    // Create error bubbles effect
    function createErrorBubbles(element) {
      const rect = element.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;
      
      for (let i = 0; i < 20; i++) {
        const bubble = document.createElement('div');
        bubble.className = 'error-bubble';
        
        const size = Math.random() * 12 + 3;
        const angle = Math.random() * Math.PI * 2;
        const distance = Math.random() * 60 + 30;
        const duration = Math.random() * 0.8 + 0.3;
        const color = `rgba(247, 37, 133, ${Math.random() * 0.5 + 0.3})`;
        
        bubble.style.width = `${size}px`;
        bubble.style.height = `${size}px`;
        bubble.style.background = color;
        bubble.style.borderRadius = '50%';
        bubble.style.position = 'fixed';
        bubble.style.left = `${centerX}px`;
        bubble.style.top = `${centerY}px`;
        bubble.style.opacity = '0.8';
        bubble.style.filter = 'blur(1px)';
        bubble.style.transform = `translate(${Math.cos(angle) * distance}px, ${Math.sin(angle) * distance}px)`;
        bubble.style.animation = `error-bubble-fade ${duration}s ease-out forwards`;
        bubble.style.zIndex = '1000';
        bubble.style.pointerEvents = 'none';
        bubble.style.willChange = 'transform, opacity';
        bubble.style.boxShadow = `0 0 ${size}px ${size/2}px rgba(247, 37, 133, 0.3)`;
        
        document.body.appendChild(bubble);
        
        // Remove bubble after animation
        setTimeout(() => {
          bubble.remove();
        }, duration * 1000);
      }
    }

    // Add CSS for bubble animations
    const style = document.createElement('style');
    style.textContent = `
      @keyframes success-bubble-fade {
        0% {
          transform: translate(0, 0) scale(0.8);
          opacity: 0.8;
        }
        50% {
          opacity: 1;
          filter: blur(0);
        }
        100% {
          transform: translate(var(--tx, 0), var(--ty, 0)) scale(1.5);
          opacity: 0;
          filter: blur(2px);
        }
      }
      
      @keyframes error-bubble-fade {
        0% {
          transform: translate(0, 0) scale(0.8);
          opacity: 0.8;
        }
        100% {
          transform: translate(var(--tx, 0), var(--ty, 0)) scale(1.2);
          opacity: 0;
        }
      }
      
      /* Bubble pulse animation */
      @keyframes bubble-pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.2); }
      }
    `;
    document.head.appendChild(style);

    // Initialize everything when page loads
    document.addEventListener('DOMContentLoaded', function() {
      createQuantumBubbles();
      
      // Add parallax effect to quantum bubbles
      document.addEventListener('mousemove', function(e) {
        const bubbles = document.querySelectorAll('.quantum-bubble:not(.orbital-bubble)');
        bubbles.forEach(bubble => {
          const speed = parseFloat(bubble.style.zIndex || 0) * 1.5;
          const x = (e.clientX - window.innerWidth / 2) / 100 * speed;
          const y = (e.clientY - window.innerHeight / 2) / 100 * speed;
          bubble.style.transform = `translate(${x}px, ${y}px) translateZ(${speed}px)`;
        });
      });
      
      // Recreate bubbles on resize (with debounce)
      let resizeTimeout;
      window.addEventListener('resize', function() {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(createQuantumBubbles, 200);
      });
      
      // Check for error messages in URL (for redirects from other pages)
      const urlParams = new URLSearchParams(window.location.search);
      const errorMessage = urlParams.get('error');
      if (errorMessage) {
        showStatusMessage(decodeURIComponent(errorMessage), 'error');
      }
      
      // Check for success messages in URL
      const successMessage = urlParams.get('success');
      if (successMessage) {
        showStatusMessage(decodeURIComponent(successMessage), 'success');
      }
      
      // Periodically add some floating bubbles
      setInterval(() => {
        const floatingBubble = document.createElement('div');
        floatingBubble.className = 'quantum-bubble floating';
        
        const size = Math.random() * 30 + 10;
        const startX = Math.random() * window.innerWidth;
        const duration = Math.random() * 10 + 10;
        const color = `rgba(${Math.floor(Math.random() * 100 + 155)}, 
                         ${Math.floor(Math.random() * 100 + 155)}, 
                         ${Math.floor(Math.random() * 100 + 155)}, 0.6)`;
        
        floatingBubble.style.width = `${size}px`;
        floatingBubble.style.height = `${size}px`;
        floatingBubble.style.left = `${startX}px`;
        floatingBubble.style.bottom = `-${size}px`;
        floatingBubble.style.animation = `bubble-rise ${duration}s linear forwards`;
        floatingBubble.style.backgroundColor = color;
        floatingBubble.style.zIndex = '-1';
        floatingBubble.style.opacity = '0.7';
        floatingBubble.style.boxShadow = `0 0 ${size}px ${size/2}px ${color.replace('0.6', '0.2')}`;
        
        document.body.appendChild(floatingBubble);
        
        // Remove bubble after animation
        setTimeout(() => {
          floatingBubble.remove();
        }, duration * 1000);
      }, 1000);
    });
  </script>
</body>
</html>