<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Secure Deposit Form</title>
  <style>
    :root {
      --primary-color: #4a6bff;
      --secondary-color: #6c757d;
      --success-color: #28a745;
      --error-color: #ff4d4d;
      --light-color: #ffffff;
      --dark-color: #343a40;
      --gold-color: #FFD700;
      --silver-color: #C0C0C0;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background-color: #f5f7fa;
      overflow: hidden;
      position: relative;
    }

    /* Deposit-themed Background Animations */
    .coin {
      position: absolute;
      border-radius: 50%;
      background: radial-gradient(circle at 30% 30%, var(--gold-color), #daa520);
      box-shadow: 0 0 10px rgba(218, 165, 32, 0.6);
      animation: floatCoin 15s linear infinite;
      z-index: -1;
      opacity: 0;
    }

    .banknote {
      position: absolute;
      background: linear-gradient(135deg, #f5f5f5, #e0e0e0);
      border-radius: 4px;
      display: flex;
      justify-content: center;
      align-items: center;
      font-weight: bold;
      color: #333;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      z-index: -1;
      opacity: 0;
      animation: floatNote 12s linear infinite;
      transform: rotate(15deg);
    }

    @keyframes floatCoin {
      0% {
        transform: translateY(110vh) translateX(0) rotate(0deg) scale(0.5);
        opacity: 0;
      }
      10% {
        opacity: 0.8;
      }
      90% {
        opacity: 0.8;
      }
      100% {
        transform: translateY(-10vh) translateX(100px) rotate(360deg) scale(1);
        opacity: 0;
      }
    }

    @keyframes floatNote {
      0% {
        transform: translateY(110vh) translateX(0) rotate(15deg) scale(0.5);
        opacity: 0;
      }
      10% {
        opacity: 0.8;
      }
      90% {
        opacity: 0.8;
      }
      100% {
        transform: translateY(-10vh) translateX(100px) rotate(30deg) scale(1);
        opacity: 0;
      }
    }

    /* Form Container with Enhanced Animation */
    .form-container {
      background: rgba(255, 255, 255, 0.98);
      padding: 30px 40px;
      border-radius: 15px;
      box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
      width: 100%;
      max-width: 420px;
      transform: translateY(30px);
      opacity: 0;
      animation: fadeInUp 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards 0.3s;
      position: relative;
      overflow: hidden;
      border: 1px solid rgba(0, 0, 0, 0.05);
    }

    .form-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 4px;
      background: linear-gradient(90deg, var(--primary-color), var(--success-color));
      animation: progressBar 3s ease-in-out infinite;
    }

    @keyframes progressBar {
      0% { width: 0; left: 0; }
      50% { width: 100%; left: 0; }
      100% { width: 0; left: 100%; }
    }

    @keyframes fadeInUp {
      to {
        transform: translateY(0);
        opacity: 1;
      }
    }

    .form-container h2 {
      margin-bottom: 25px;
      text-align: center;
      color: var(--dark-color);
      font-size: 26px;
      position: relative;
    }

    .form-container h2::after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 50%;
      transform: translateX(-50%);
      width: 60px;
      height: 3px;
      background: linear-gradient(90deg, var(--primary-color), var(--success-color));
      border-radius: 3px;
    }

    .form-container label {
      display: block;
      margin-bottom: 10px;
      font-weight: 600;
      color: var(--dark-color);
      animation: slideInLabel 0.5s ease-out forwards;
      opacity: 0;
      transform: translateX(-10px);
    }

    @keyframes slideInLabel {
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }

    .form-container label:nth-child(1) {
      animation-delay: 0.5s;
    }
    .form-container label:nth-child(3) {
      animation-delay: 0.6s;
    }

    .form-container input {
      width: 100%;
      padding: 14px;
      margin-bottom: 18px;
      border: 1px solid #ddd;
      border-radius: 8px;
      font-size: 16px;
      transition: all 0.3s ease;
      background: rgba(255, 255, 255, 0.9);
      animation: inputFadeIn 0.5s ease-out forwards;
      opacity: 0;
      transform: translateY(10px);
    }

    @keyframes inputFadeIn {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .form-container input:nth-of-type(1) {
      animation-delay: 0.7s;
    }
    .form-container input:nth-of-type(2) {
      animation-delay: 0.8s;
    }

    .form-container input:focus {
      border-color: var(--primary-color);
      outline: none;
      box-shadow: 0 0 0 3px rgba(74, 107, 255, 0.2);
      background: var(--light-color);
    }

    /* Enhanced Button with Ripple Effect */
    .form-container button {
      width: 100%;
      padding: 14px;
      background: linear-gradient(135deg, var(--primary-color), #3a5bed);
      border: none;
      border-radius: 8px;
      color: white;
      font-size: 18px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
      animation: buttonFadeIn 0.5s ease-out forwards;
      opacity: 0;
      transform: translateY(10px);
      animation-delay: 0.9s;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    @keyframes buttonFadeIn {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .form-container button:hover {
      background: linear-gradient(135deg, #3a5bed, #2a4bdd);
      transform: translateY(-2px);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    .form-container button:active {
      transform: translateY(0);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .form-container button .ripple {
      position: absolute;
      border-radius: 50%;
      background-color: rgba(255, 255, 255, 0.7);
      transform: scale(0);
      animation: ripple 0.6s linear;
      pointer-events: none;
    }

    @keyframes ripple {
      to {
        transform: scale(4);
        opacity: 0;
      }
    }

    /* Enhanced Error Styles */
    .error {
      color: var(--error-color);
      font-size: 14px;
      margin-bottom: 15px;
      padding: 8px 12px;
      background: rgba(255, 77, 77, 0.1);
      border-radius: 6px;
      border-left: 4px solid var(--error-color);
      animation: shake 0.5s ease, fadeIn 0.3s ease;
      display: flex;
      align-items: center;
    }

    .error::before {
      content: '!';
      margin-right: 8px;
      background: var(--error-color);
      color: white;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      font-weight: bold;
    }

    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      20%, 60% { transform: translateX(-5px); }
      40%, 80% { transform: translateX(5px); }
    }

    /* Success Message with Confetti */
    .success-message {
      color: var(--success-color);
      font-size: 16px;
      text-align: center;
      margin-top: 20px;
      padding: 12px;
      background: rgba(40, 167, 69, 0.1);
      border-radius: 8px;
      border-left: 4px solid var(--success-color);
      animation: fadeIn 0.5s ease;
      position: relative;
      overflow: hidden;
    }

    .success-message::before {
      content: '✓';
      margin-right: 8px;
      background: var(--success-color);
      color: white;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      display: inline-flex;
      justify-content: center;
      align-items: center;
      font-weight: bold;
    }

    /* Wrong Password Animation */
    .wrong-password {
      color: var(--error-color);
      font-size: 14px;
      text-align: center;
      margin: 15px 0;
      padding: 10px;
      background: rgba(255, 77, 77, 0.1);
      border-radius: 8px;
      animation: pulse 1.5s infinite, fadeIn 0.5s ease;
      border: 1px dashed rgba(255, 77, 77, 0.3);
      position: relative;
    }

    .wrong-password::before {
      content: '⚠';
      margin-right: 8px;
    }

    @keyframes pulse {
      0%, 100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(255, 77, 77, 0.1); }
      50% { transform: scale(1.02); box-shadow: 0 0 0 5px rgba(255, 77, 77, 0); }
    }

    /* Deposit Confetti Animation */
    .deposit-confetti {
      position: absolute;
      width: 12px;
      height: 12px;
      opacity: 0;
      animation: depositConfetti 3s ease-in-out forwards;
    }

    @keyframes depositConfetti {
      0% {
        transform: translateY(0) rotate(0deg);
        opacity: 1;
      }
      100% {
        transform: translateY(100vh) rotate(360deg);
        opacity: 0;
      }
    }

    /* Digital Currency Animation */
    .digital-currency {
      position: absolute;
      color: rgba(0, 0, 0, 0.1);
      font-family: monospace;
      font-weight: bold;
      z-index: -1;
      user-select: none;
      animation: floatDigital 20s linear infinite;
    }

    @keyframes floatDigital {
      0% {
        transform: translateY(110vh) translateX(0) rotate(0deg);
        opacity: 0;
      }
      20% {
        opacity: 0.1;
      }
      80% {
        opacity: 0.1;
      }
      100% {
        transform: translateY(-10vh) translateX(100px) rotate(360deg);
        opacity: 0;
      }
    }
  </style>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>
<body>
  <%- include("../utils/header")%> 
  <%- include("side")%>
  
  <!-- Deposit-themed Background Elements -->
  <div id="depositBackground"></div>
  
  <form action="/deposit1" method="post">
    <div class="form-container">
      <h2>Deposit Funds</h2>
      
      <form id="detailsForm">
        <label for="amount">Amount to Deposit:</label>
        <input type="number" id="amount" name="amount" placeholder="Enter amount" required>
        <span id="amountError" class="error" style="display: none;"></span>

        <label for="password">Account Password:</label>
        <input type="password" id="password" name="password" placeholder="Enter your password" required>
        <span id="passwordError" class="error" style="display: none;"></span>
        
        <% if (passwordcheck > 0) { %>
          <p class="wrong-password">Incorrect Password (Attempt <%= passwordcheck %>)</p>
        <% } %>

        <button type="submit" id="submitBtn">
          <i class="fas fa-coins" style="margin-right: 8px;"></i> Deposit Funds
        </button>
       
        <div id="successMessage" class="success-message" style="display: none;">
          <i class="fas fa-check-circle" style="margin-right: 8px;"></i> Deposit Successful!
        </div>
      </form>
    </div>
  </form>

  <%- include("../utils/footer"); %> 
  <script>
    // Create deposit-themed background elements
    const depositBackground = document.getElementById('depositBackground');
    
    // Create floating coins
    for (let i = 0; i < 15; i++) {
      const coin = document.createElement('div');
      coin.className = 'coin';
      
      // Random size between 20-40px
      const size = Math.random() * 20 + 20;
      coin.style.width = `${size}px`;
      coin.style.height = `${size}px`;
      
      // Random position
      coin.style.left = `${Math.random() * 100}%`;
      
      // Random animation duration and delay
      coin.style.animationDuration = `${Math.random() * 15 + 10}s`;
      coin.style.animationDelay = `${Math.random() * 10}s`;
      
      // Make some coins silver
      if (Math.random() > 0.7) {
        coin.style.background = 'radial-gradient(circle at 30% 30%, var(--silver-color), #c0c0c0';
        coin.style.boxShadow = '0 0 10px rgba(192, 192, 192, 0.6)';
      }
      
      depositBackground.appendChild(coin);
    }
    
    // Create floating banknotes
    const denominations = ['₹100', '₹200', '₹500', '₹2000'];
    for (let i = 0; i < 10; i++) {
      const note = document.createElement('div');
      note.className = 'banknote';
      
      // Random size
      const width = Math.random() * 40 + 60;
      const height = width / 2;
      note.style.width = `${width}px`;
      note.style.height = `${height}px`;
      
      // Random position
      note.style.left = `${Math.random() * 100}%`;
      
      // Random denomination
      note.textContent = denominations[Math.floor(Math.random() * denominations.length)];
      
      // Random animation duration and delay
      note.style.animationDuration = `${Math.random() * 12 + 8}s`;
      note.style.animationDelay = `${Math.random() * 8}s`;
      
      // Color based on denomination
      if (note.textContent.includes('500')) {
        note.style.background = 'linear-gradient(135deg, #f5f5f5, var(--gold-color))';
      } else if (note.textContent.includes('2000')) {
        note.style.background = 'linear-gradient(135deg, #f5f5f5, #87CEEB)';
      }
      
      depositBackground.appendChild(note);
    }

    // Create subtle digital currency elements in background
    for (let i = 0; i < 10; i++) {
      const digital = document.createElement('div');
      digital.className = 'digital-currency';
      digital.textContent = Math.random() > 0.5 ? '₹' : [0, 1][Math.floor(Math.random() * 2)];
      
      // Random size between 20-50px
      const size = Math.random() * 30 + 20;
      digital.style.fontSize = `${size}px`;
      
      // Random position
      digital.style.left = `${Math.random() * 100}%`;
      
      // Random animation duration and delay
      digital.style.animationDuration = `${Math.random() * 20 + 15}s`;
      digital.style.animationDelay = `${Math.random() * 15}s`;
      
      depositBackground.appendChild(digital);
    }

    // Form handling with enhanced animations
    const form = document.getElementById('detailsForm');
    const amountInput = document.getElementById('amount');
    const passwordInput = document.getElementById('password');
    const amountError = document.getElementById('amountError');
    const passwordError = document.getElementById('passwordError');
    const successMessage = document.getElementById('successMessage');
    const submitBtn = document.getElementById('submitBtn');

    // Add ripple effect to button
    submitBtn.addEventListener('click', function(e) {
      const rect = this.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      
      const ripple = document.createElement('span');
      ripple.className = 'ripple';
      ripple.style.left = `${x}px`;
      ripple.style.top = `${y}px`;
      this.appendChild(ripple);
      
      setTimeout(() => {
        ripple.remove();
      }, 600);
    });

    form.addEventListener('submit', (event) => {
      event.preventDefault();

      let isValid = true;

      // Clear previous errors
      amountError.style.display = 'none';
      passwordError.style.display = 'none';
      successMessage.style.display = 'none';

      // Validate amount
      if (!amountInput.value || amountInput.value <= 0) {
        amountError.textContent = 'Please enter a valid positive amount.';
        amountError.style.display = 'flex';
        isValid = false;
        
        // Add shake animation to input
        amountInput.style.animation = 'shake 0.5s ease';
        setTimeout(() => {
          amountInput.style.animation = '';
        }, 500);
      }

      // Validate password
      if (!passwordInput.value) {
        passwordError.textContent = 'Please enter your password.';
        passwordError.style.display = 'flex';
        isValid = false;
        
        // Add shake animation to input
        passwordInput.style.animation = 'shake 0.5s ease';
        setTimeout(() => {
          passwordInput.style.animation = '';
        }, 500);
      }

      // If valid, show success message with confetti
      if (isValid) {
        successMessage.style.display = 'block';
        
        // Create deposit-themed confetti effect
        createDepositConfetti();
        
        // Submit the form after animation
        setTimeout(() => {
          form.submit();
        }, 2000);
      }
    });

    function createDepositConfetti() {
      const colors = ['#4a6bff', '#28a745', '#FFD700', '#C0C0C0', '#87CEEB'];
      const symbols = ['₹', '$', '€', '¢', '¤'];
      
      for (let i = 0; i < 50; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'deposit-confetti';
        confetti.style.left = `${Math.random() * 100}%`;
        confetti.style.top = '0';
        confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
        
        // Random size and shape
        if (Math.random() > 0.5) {
          // Coin-shaped confetti
          confetti.style.width = `${Math.random() * 10 + 6}px`;
          confetti.style.height = confetti.style.width;
          confetti.style.borderRadius = '50%';
          confetti.style.boxShadow = `0 0 5px ${colors[Math.floor(Math.random() * colors.length)]}`;
        } else {
          // Banknote-shaped confetti
          confetti.style.width = `${Math.random() * 20 + 10}px`;
          confetti.style.height = `${Math.random() * 10 + 5}px`;
          confetti.style.borderRadius = '2px';
          
          // Add currency symbol to some notes
          if (Math.random() > 0.7) {
            confetti.textContent = symbols[Math.floor(Math.random() * symbols.length)];
            confetti.style.display = 'flex';
            confetti.style.justifyContent = 'center';
            confetti.style.alignItems = 'center';
            confetti.style.color = '#333';
            confetti.style.fontWeight = 'bold';
            confetti.style.fontSize = '10px';
          }
        }
        
        confetti.style.animationDuration = `${Math.random() * 2 + 1}s`;
        confetti.style.animationDelay = `${Math.random() * 0.5}s`;
        
        document.body.appendChild(confetti);
        
        setTimeout(() => {
          confetti.remove();
        }, 3000);
      }
    }
  </script>
</body>
</html>