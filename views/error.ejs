<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Error Occurred</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&family=Roboto+Mono:wght@400;500&display=swap" rel="stylesheet">
    <style>
        :root {
            --error-primary: #ff4f4f;
            --error-dark: #d32f2f;
            --error-darker: #b71c1c;
            --error-light: #ffcdd2;
            --error-lighter: #ffebee;
            --text-primary: #2d3748;
            --text-secondary: #4a5568;
            --bg-primary: #f8f9fa;
            --bg-secondary: #e9ecef;
            --success-color: #4caf50;
            --warning-color: #ff9800;
            --info-color: #2196f3;
            --transition-base: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
            --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
            --shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.1), 0 5px 10px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 40px rgba(0, 0, 0, 0.15), 0 10px 10px rgba(0, 0, 0, 0.05);
            --shadow-error: 0 0 15px rgba(255, 79, 79, 0.4);
            --border-radius-sm: 4px;
            --border-radius-md: 8px;
            --border-radius-lg: 12px;
            --border-radius-xl: 16px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            overflow-x: hidden;
            position: relative;
            line-height: 1.6;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        /* ==================== */
        /* BACKGROUND ANIMATIONS */
        /* ==================== */
        .error-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -2;
            overflow: hidden;
        }

        .error-bg::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, var(--error-lighter) 0%, var(--bg-primary) 100%);
            opacity: 0.8;
            z-index: -1;
        }

        .error-particle {
            position: absolute;
            background-color: var(--error-light);
            border-radius: 50%;
            z-index: -1;
            opacity: 0;
            filter: blur(1px);
        }

        .error-particle:nth-child(3n+1) {
            background-color: var(--error-primary);
        }

        .error-particle:nth-child(3n+2) {
            background-color: var(--error-dark);
        }

        .error-particle:nth-child(3n+3) {
            background-color: var(--error-light);
        }

        @keyframes floatError1 {
            0% {
                transform: translateY(110vh) translateX(0) rotate(0deg) scale(0.3);
                opacity: 0;
            }
            10% {
                opacity: 0.5;
            }
            90% {
                opacity: 0.5;
            }
            100% {
                transform: translateY(-10vh) translateX(100px) rotate(360deg) scale(0.8);
                opacity: 0;
            }
        }

        @keyframes floatError2 {
            0% {
                transform: translateY(110vh) translateX(50px) rotate(180deg) scale(0.4);
                opacity: 0;
            }
            10% {
                opacity: 0.4;
            }
            90% {
                opacity: 0.4;
            }
            100% {
                transform: translateY(-10vh) translateX(-100px) rotate(540deg) scale(0.7);
                opacity: 0;
            }
        }

        @keyframes floatError3 {
            0% {
                transform: translateY(110vh) translateX(-50px) rotate(90deg) scale(0.5);
                opacity: 0;
            }
            10% {
                opacity: 0.3;
            }
            90% {
                opacity: 0.3;
            }
            100% {
                transform: translateY(-10vh) translateX(150px) rotate(270deg) scale(0.6);
                opacity: 0;
            }
        }

        /* Circuit board effect */
        .circuit-board {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(to right, rgba(255, 79, 79, 0.05) 1px, transparent 1px),
                linear-gradient(to bottom, rgba(255, 79, 79, 0.05) 1px, transparent 1px);
            background-size: 40px 40px;
            z-index: -2;
            opacity: 0.3;
            animation: circuitFade 8s infinite alternate;
        }

        @keyframes circuitFade {
            0% { opacity: 0.1; }
            100% { opacity: 0.4; }
        }

        /* Glitch effect for the background */
        .glitch-bg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, transparent 45%, rgba(255, 79, 79, 0.1) 45%, rgba(255, 79, 79, 0.1) 55%, transparent 55%),
                        linear-gradient(-45deg, transparent 45%, rgba(255, 79, 79, 0.1) 45%, rgba(255, 79, 79, 0.1) 55%, transparent 55%);
            background-size: 0.5em 0.5em;
            z-index: -1;
            opacity: 0;
            animation: glitchBg 12s infinite;
        }

        @keyframes glitchBg {
            0%, 100% { opacity: 0; transform: translate(0); }
            2% { opacity: 0.1; transform: translate(-5px, -5px); }
            4% { opacity: 0; transform: translate(5px, 5px); }
            6% { opacity: 0.1; transform: translate(-5px, 0); }
            8% { opacity: 0; transform: translate(0, -5px); }
            10% { opacity: 0.1; transform: translate(5px, 0); }
            12% { opacity: 0; transform: translate(0, 5px); }
            98% { opacity: 0; }
        }

        /* =============== */
        /* MAIN CONTAINER */
        /* =============== */
        .container {
            text-align: center;
            background-color: rgba(255, 255, 255, 0.95);
            padding: 2.5rem;
            border-radius: var(--border-radius-xl);
            box-shadow: var(--shadow-xl);
            width: 90%;
            max-width: 500px;
            transform: translateY(30px);
            opacity: 0;
            animation: fadeInUp 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards;
            position: relative;
            z-index: 10;
            border-left: 8px solid var(--error-primary);
            backdrop-filter: blur(5px);
            transition: var(--transition-base);
            margin: 2rem;
            overflow: hidden;
        }

        .container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, rgba(255, 79, 79, 0.03) 0%, transparent 100%);
            z-index: -1;
        }

        .container:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-xl), 0 0 25px rgba(255, 79, 79, 0.2);
        }

        @keyframes fadeInUp {
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        /* ============= */
        /* ERROR ICON */
        /* ============= */
        .error-icon {
            font-size: 5rem;
            color: var(--error-primary);
            margin-bottom: 1.5rem;
            animation: shake 0.8s cubic-bezier(.36,.07,.19,.97) both, pulse 2s infinite 1s;
            transform: translate3d(0, 0, 0);
            display: inline-block;
            position: relative;
            text-shadow: 0 0 10px rgba(255, 79, 79, 0.3);
        }

        .error-icon::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 50%;
            border: 2px solid var(--error-primary);
            animation: ripple 2s infinite;
            opacity: 0;
            pointer-events: none;
        }

        @keyframes shake {
            10%, 90% { transform: translate3d(-2px, 0, 0) rotate(-5deg); }
            20%, 80% { transform: translate3d(4px, 0, 0) rotate(5deg); }
            30%, 50%, 70% { transform: translate3d(-6px, 0, 0) rotate(-8deg); }
            40%, 60% { transform: translate3d(6px, 0, 0) rotate(8deg); }
        }

        @keyframes pulse {
            0% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.1); opacity: 0.8; }
            100% { transform: scale(1); opacity: 1; }
        }

        @keyframes ripple {
            0% { transform: scale(0.5); opacity: 0; }
            50% { transform: scale(1.1); opacity: 0.3; }
            100% { transform: scale(1.5); opacity: 0; }
        }

        /* ============= */
        /* HEADINGS */
        /* ============= */
        h1 {
            color: var(--error-primary);
            font-size: 2.5rem;
            margin-bottom: 1rem;
            animation: textPulse 3s infinite;
            position: relative;
            display: inline-block;
            font-weight: 700;
            letter-spacing: -0.5px;
        }

        h1::before {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 50%;
            transform: translateX(-50%);
            width: 50px;
            height: 3px;
            background-color: var(--error-primary);
            border-radius: 3px;
            animation: underlinePulse 3s infinite;
        }

        @keyframes textPulse {
            0% { text-shadow: 0 0 5px rgba(255, 79, 79, 0.3); }
            50% { text-shadow: 0 0 20px rgba(255, 79, 79, 0.6); }
            100% { text-shadow: 0 0 5px rgba(255, 79, 79, 0.3); }
        }

        @keyframes underlinePulse {
            0% { width: 50px; opacity: 0.7; }
            50% { width: 80px; opacity: 1; }
            100% { width: 50px; opacity: 0.7; }
        }

        h2 {
            color: var(--text-secondary);
            font-size: 1.25rem;
            margin-bottom: 1.5rem;
            font-weight: 500;
        }

        /* ============= */
        /* ERROR MESSAGE */
        /* ============= */
        .error-message {
            font-size: 1.1rem;
            margin-bottom: 2rem;
            line-height: 1.7;
            color: var(--text-secondary);
            position: relative;
            padding: 0 1rem;
        }

        .error-message::before,
        .error-message::after {
            content: '"';
            color: var(--error-primary);
            font-size: 1.5rem;
            position: absolute;
            opacity: 0.7;
        }

        .error-message::before {
            top: -0.5rem;
            left: 0;
        }

        .error-message::after {
            bottom: -1.5rem;
            right: 0;
        }

        /* ============= */
        /* ERROR DETAILS */
        /* ============= */
        .error-details {
            background-color: rgba(255, 205, 210, 0.3);
            padding: 1.25rem;
            border-radius: var(--border-radius-md);
            margin-bottom: 2rem;
            text-align: left;
            font-family: 'Roboto Mono', monospace;
            font-size: 0.85rem;
            max-height: 200px;
            overflow-y: auto;
            border-left: 3px solid var(--error-primary);
            transition: var(--transition-base);
            position: relative;
            display: none;
        }

        .error-details:hover {
            background-color: rgba(255, 205, 210, 0.4);
            box-shadow: var(--shadow-sm);
        }

        .error-details pre {
            margin: 0;
            white-space: pre-wrap;
            word-wrap: break-word;
            color: var(--error-darker);
        }

        .error-details-title {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--error-dark);
            cursor: pointer;
            user-select: none;
        }

        .error-details-title i {
            transition: transform 0.3s ease;
        }

        .error-details.active .error-details-title i {
            transform: rotate(180deg);
        }

        /* ============= */
        /* BUTTONS */
        /* ============= */
        .action-buttons {
            display: flex;
            justify-content: center;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: var(--border-radius-lg);
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: var(--transition-base);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            min-width: 120px;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow-sm);
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn-primary {
            background-color: var(--error-primary);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--error-dark);
            transform: translateY(-3px);
            box-shadow: var(--shadow-md), var(--shadow-error);
        }

        .btn-primary:active {
            transform: translateY(0);
        }

        .btn-secondary {
            background-color: white;
            color: var(--text-primary);
            border: 1px solid var(--bg-secondary);
        }

        .btn-secondary:hover {
            background-color: var(--bg-secondary);
            transform: translateY(-3px);
            box-shadow: var(--shadow-md);
        }

        .btn-secondary:active {
            transform: translateY(0);
        }

        /* ============= */
        /* STATUS LIGHT */
        /* ============= */
        .status-light {
            position: absolute;
            top: 1.5rem;
            right: 1.5rem;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: var(--error-primary);
            box-shadow: 0 0 10px var(--error-primary);
            animation: statusPulse 2s infinite;
        }

        @keyframes statusPulse {
            0% { box-shadow: 0 0 0 0 rgba(255, 79, 79, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(255, 79, 79, 0); }
            100% { box-shadow: 0 0 0 0 rgba(255, 79, 79, 0); }
        }

        /* ============= */
        /* TIMESTAMP */
        /* ============= */
        .timestamp {
            font-size: 0.75rem;
            color: var(--text-secondary);
            margin-top: 1.5rem;
            opacity: 0.7;
        }

        /* ============= */
        /* GLITCH EFFECT */
        /* ============= */
        .glitch {
            position: relative;
        }

        .glitch::before, .glitch::after {
            content: attr(data-text);
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0.8;
        }

        .glitch::before {
            color: #0ff;
            z-index: -1;
            animation: glitch-effect 3s infinite;
        }

        .glitch::after {
            color: #f0f;
            z-index: -2;
            animation: glitch-effect 2s infinite reverse;
        }

        @keyframes glitch-effect {
            0% { transform: translate(0); }
            20% { transform: translate(-3px, 3px); }
            40% { transform: translate(-3px, -3px); }
            60% { transform: translate(3px, 3px); }
            80% { transform: translate(3px, -3px); }
            100% { transform: translate(0); }
        }

        /* ============= */
        /* RESPONSIVE */
        /* ============= */
        @media (max-width: 768px) {
            .container {
                padding: 1.5rem;
                width: 95%;
            }

            h1 {
                font-size: 2rem;
            }

            h2 {
                font-size: 1.1rem;
            }

            .error-message {
                font-size: 1rem;
            }

            .error-icon {
                font-size: 4rem;
            }

            .action-buttons {
                flex-direction: column;
                gap: 0.75rem;
            }

            .btn {
                width: 100%;
            }
        }

        @media (max-width: 480px) {
            .container {
                padding: 1.25rem;
                border-radius: var(--border-radius-lg);
            }

            h1 {
                font-size: 1.75rem;
            }

            .error-message {
                padding: 0 0.5rem;
            }
        }

        /* ============= */
        /* UTILITY CLASSES */
        /* ============= */
        .text-center {
            text-align: center;
        }

        .mb-1 { margin-bottom: 0.5rem; }
        .mb-2 { margin-bottom: 1rem; }
        .mb-3 { margin-bottom: 1.5rem; }
        .mb-4 { margin-bottom: 2rem; }

        /* ============= */
        /* LOADING BAR */
        /* ============= */
        .loading-bar {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background-color: var(--error-light);
            overflow: hidden;
        }

        .loading-bar::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: var(--error-primary);
            animation: loading 2s infinite ease-in-out;
        }

        @keyframes loading {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        /* ============= */
        /* ERROR CODE */
        /* ============= */
        .error-code {
            display: inline-block;
            background-color: var(--error-light);
            color: var(--error-dark);
            padding: 0.25rem 0.75rem;
            border-radius: var(--border-radius-sm);
            font-family: 'Roboto Mono', monospace;
            font-size: 0.9rem;
            margin-bottom: 1rem;
            animation: codePulse 3s infinite;
        }

        @keyframes codePulse {
            0% { box-shadow: 0 0 0 0 rgba(255, 79, 79, 0.3); }
            70% { box-shadow: 0 0 0 8px rgba(255, 79, 79, 0); }
            100% { box-shadow: 0 0 0 0 rgba(255, 79, 79, 0); }
        }

        /* ============= */
        /* ERROR TRACER */
        /* ============= */
        .error-tracer {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius-md);
            font-size: 0.8rem;
            font-family: 'Roboto Mono', monospace;
            z-index: 1000;
            opacity: 0;
            transform: translateY(20px);
            transition: var(--transition-base);
        }

        .error-tracer.show {
            opacity: 1;
            transform: translateY(0);
        }

        /* ============= */
        /* ERROR WAVE */
        /* ============= */
        .error-wave {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 100px;
            background: url('data:image/svg+xml;utf8,<svg viewBox="0 0 1200 120" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none"><path d="M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z" fill="%23ff4f4f" opacity=".25"/><path d="M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z" fill="%23ff4f4f" opacity=".5"/><path d="M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,942.2,90.86c141.15-10.29,231.61-75.8,300.74-141.55,11.07-10.45,27.48-23.21,47.1-30C1137.54,5.27,1149.49,0,1200,0Z" fill="%23ff4f4f"/></svg>');
            background-size: cover;
            background-repeat: no-repeat;
            z-index: -1;
            opacity: 0.1;
            animation: waveMove 15s linear infinite;
        }

        @keyframes waveMove {
            0% { transform: translateX(0); }
            100% { transform: translateX(-50%); }
        }

        /* ============= */
        /* ERROR SCANLINES */
        /* ============= */
        .scanlines {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to bottom, 
                transparent 95%, 
                rgba(255, 79, 79, 0.03) 95%, 
                rgba(255, 79, 79, 0.03) 96%, 
                transparent 96%);
            background-size: 100% 8px;
            pointer-events: none;
            z-index: 999;
            animation: scanline 8s linear infinite;
            opacity: 0.3;
        }

        @keyframes scanline {
            0% { background-position: 0 0; }
            100% { background-position: 0 100%; }
        }

        /* ============= */
        /* ERROR CORNER */
        /* ============= */
        .corner {
            position: absolute;
            width: 50px;
            height: 50px;
            border-color: var(--error-primary);
            border-style: solid;
            border-width: 0;
            opacity: 0.5;
            transition: all 0.3s ease;
        }

        .corner-tl {
            top: 0;
            left: 0;
            border-top-width: 3px;
            border-left-width: 3px;
            border-top-left-radius: var(--border-radius-md);
        }

        .corner-tr {
            top: 0;
            right: 0;
            border-top-width: 3px;
            border-right-width: 3px;
            border-top-right-radius: var(--border-radius-md);
        }

        .corner-bl {
            bottom: 0;
            left: 0;
            border-bottom-width: 3px;
            border-left-width: 3px;
            border-bottom-left-radius: var(--border-radius-md);
        }

        .corner-br {
            bottom: 0;
            right: 0;
            border-bottom-width: 3px;
            border-right-width: 3px;
            border-bottom-right-radius: var(--border-radius-md);
        }

        .container:hover .corner {
            width: 60px;
            height: 60px;
            opacity: 1;
        }

        /* ============= */
        /* ERROR COUNTER */
        /* ============= */
        .error-counter {
            position: absolute;
            top: -10px;
            right: -10px;
            background-color: var(--error-primary);
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: bold;
            box-shadow: var(--shadow-sm);
            animation: counterPulse 2s infinite;
        }

        @keyframes counterPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        /* ============= */
        /* ERROR TOAST */
        /* ============= */
        .error-toast {
            position: fixed;
            bottom: -100px;
            left: 50%;
            transform: translateX(-50%);
            background-color: var(--error-primary);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow-lg);
            z-index: 1000;
            opacity: 0;
            transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .error-toast.show {
            bottom: 2rem;
            opacity: 1;
        }

        /* ============= */
        /* ERROR GRID */
        /* ============= */
        .error-grid {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(rgba(255, 79, 79, 0.1) 1px, transparent 1px),
                linear-gradient(90deg, rgba(255, 79, 79, 0.1) 1px, transparent 1px);
            background-size: 40px 40px;
            z-index: -1;
            opacity: 0.2;
        }

        /* ============= */
        /* ERROR DIAGONAL */
        /* ============= */
        .error-diagonal {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, 
                rgba(255, 255, 255, 0) 45%, 
                rgba(255, 79, 79, 0.05) 45%, 
                rgba(255, 79, 79, 0.05) 55%, 
                rgba(255, 255, 255, 0) 55%);
            z-index: -1;
            opacity: 0.1;
        }
    </style>
</head>
<body>
    <!-- Advanced background elements -->
    <div class="error-bg">
        <div class="circuit-board"></div>
        <div class="glitch-bg"></div>
        <div class="error-grid"></div>
        <div class="error-diagonal"></div>
        <div class="error-wave"></div>
        <div id="errorParticles"></div>
    </div>

    <!-- Scanlines effect -->
    <div class="scanlines"></div>

    <!-- Main container -->
    <div class="container">
        <!-- Decorative corners -->
        <div class="corner corner-tl"></div>
        <div class="corner corner-tr"></div>
        <div class="corner corner-bl"></div>
        <div class="corner corner-br"></div>

        <!-- Loading bar -->
        <div class="loading-bar"></div>

        <!-- Status light -->
        <div class="status-light"></div>

        <!-- Error counter -->
        <div class="error-counter">!</div>

        <!-- Error icon with animation -->
        <div class="error-icon">
            <i class="fas fa-exclamation-triangle"></i>
        </div>
        
        <!-- Error title with glitch effect -->
        <h1 class="glitch" data-text="Error">Error</h1>
        
        <!-- Error code -->
        <div class="error-code">ERR_500_INTERNAL_SERVER_ERROR</div>
        
        <!-- Error message -->
        <h2>Oops! Something went wrong</h2>
        
        <div class="error-message">
            We encountered an unexpected error while processing your request. Our team has been notified and we're working to fix it.
        </div>
        
        <!-- Error details (collapsible) -->
        <div class="error-details" id="errorDetails">
            <div class="error-details-title" onclick="toggleErrorDetails()">
                <span>Technical Details</span>
                <i class="fas fa-chevron-down"></i>
            </div>
            <pre id="errorDetailsContent">
Error: ENOENT: no such file or directory, open '/nonexistent/file'
    at Object.openSync (fs.js:476:3)
    at Object.readFileSync (fs.js:377:35)
    at Server.&lt;anonymous&gt; (/app/server.js:42:17)
    at Server.emit (events.js:400:28)
    at parserOnIncoming (_http_server.js:900:12)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:127:17)
Timestamp: 2023-06-15T14:32:45.123Z
Request ID: 7a3b5c8d-9e0f-4a1b-8c2d-6e3f4a5b6c7d
            </pre>
        </div>
        
        <!-- Action buttons -->
        <div class="action-buttons">
            <button class="btn btn-primary" id="retryBtn">
                <i class="fas fa-sync-alt"></i> Try Again
            </button>
            <button class="btn btn-secondary" id="homeBtn">
                <i class="fas fa-home"></i> Return Home
            </button>
            <button class="btn btn-secondary" id="contactBtn">
                <i class="fas fa-envelope"></i> Contact Support
            </button>
        </div>
        
        <!-- Timestamp -->
        <div class="timestamp" id="timestamp"></div>
    </div>

    <!-- Error tracer -->
    <div class="error-tracer" id="errorTracer">
        <i class="fas fa-bug"></i> Error detected in main thread
    </div>

    <!-- Error toast -->
    <div class="error-toast" id="errorToast">
        <i class="fas fa-exclamation-circle"></i>
        <span>Error occurred. Please try again.</span>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Set current timestamp
            document.getElementById('timestamp').textContent = new Date().toLocaleString();
            
            // Create advanced floating error particles
            const errorParticles = document.getElementById('errorParticles');
            const particleCount = 50;
            
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'error-particle';
                
                // Random size between 2-15px
                const size = Math.random() * 13 + 2;
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                
                // Random position
                particle.style.left = `${Math.random() * 100}%`;
                
                // Random animation
                const animationType = Math.floor(Math.random() * 3) + 1;
                particle.style.animationName = `floatError${animationType}`;
                
                // Random animation duration and delay
                const duration = Math.random() * 20 + 10;
                const delay = Math.random() * 15;
                particle.style.animationDuration = `${duration}s`;
                particle.style.animationDelay = `${delay}s`;
                
                // Random shape
                if (Math.random() > 0.8) {
                    particle.style.borderRadius = '3px';
                }
                
                // Random opacity
                particle.style.opacity = Math.random() * 0.5 + 0.1;
                
                errorParticles.appendChild(particle);
            }
            
            // Button event listeners
            document.getElementById('retryBtn').addEventListener('click', function() {
                // Show loading state
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Retrying...';
                this.disabled = true;
                
                // Simulate retry delay
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            });
            
            document.getElementById('homeBtn').addEventListener('click', function() {
                // Show loading state
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Redirecting...';
                this.disabled = true;
                
                // Simulate navigation delay
                setTimeout(() => {
                    window.location.href = '/';
                }, 1000);
            });
            
            document.getElementById('contactBtn').addEventListener('click', function() {
                showToast('Contact form would open here');
            });
            
            // Show error tracer after delay
            setTimeout(() => {
                document.getElementById('errorTracer').classList.add('show');
            }, 2000);
            
            // Show toast notification after delay
            setTimeout(() => {
                showToast('Error detected in main thread');
            }, 3000);
            
            // Add keyboard event listener for demo purposes
            document.addEventListener('keydown', function(e) {
                if (e.key === 'd') {
                    toggleErrorDetails();
                }
            });
            
            // Add mouse trail effect for errors
            const mouseTrail = document.createElement('div');
            mouseTrail.style.position = 'fixed';
            mouseTrail.style.width = '20px';
            mouseTrail.style.height = '20px';
            mouseTrail.style.backgroundColor = 'rgba(255, 79, 79, 0.3)';
            mouseTrail.style.borderRadius = '50%';
            mouseTrail.style.pointerEvents = 'none';
            mouseTrail.style.transform = 'translate(-50%, -50%)';
            mouseTrail.style.zIndex = '9999';
            mouseTrail.style.opacity = '0';
            document.body.appendChild(mouseTrail);
            
            let trailElements = [];
            document.addEventListener('mousemove', function(e) {
                // Main trail element
                mouseTrail.style.left = e.pageX + 'px';
                mouseTrail.style.top = e.pageY + 'px';
                mouseTrail.style.opacity = '1';
                
                // Create fading trail elements
                if (e.target.closest('.container')) {
                    const trail = document.createElement('div');
                    trail.style.position = 'fixed';
                    trail.style.width = '10px';
                    trail.style.height = '10px';
                    trail.style.backgroundColor = 'rgba(255, 79, 79, 0.2)';
                    trail.style.borderRadius = '50%';
                    trail.style.pointerEvents = 'none';
                    trail.style.left = e.pageX + 'px';
                    trail.style.top = e.pageY + 'px';
                    trail.style.transform = 'translate(-50%, -50%)';
                    trail.style.zIndex = '9998';
                    trail.style.transition = 'all 0.5s ease-out';
                    document.body.appendChild(trail);
                    
                    setTimeout(() => {
                        trail.style.width = '30px';
                        trail.style.height = '30px';
                        trail.style.opacity = '0';
                    }, 10);
                    
                    setTimeout(() => {
                        trail.remove();
                    }, 500);
                    
                    trailElements.push(trail);
                    if (trailElements.length > 10) {
                        const oldTrail = trailElements.shift();
                        if (oldTrail) oldTrail.remove();
                    }
                }
            });
            
            // Add error sound effect (would play in a real scenario)
            function playErrorSound() {
                // In a real implementation, we would play a sound here
                console.log('Error sound would play here');
            }
            
            // Simulate a sound effect when error details are shown
            function toggleErrorDetails() {
                const details = document.getElementById('errorDetails');
                details.classList.toggle('active');
                
                if (details.classList.contains('active')) {
                    playErrorSound();
                }
            }
            
            // Show toast notification
            function showToast(message) {
                const toast = document.getElementById('errorToast');
                toast.querySelector('span').textContent = message;
                toast.classList.add('show');
                
                setTimeout(() => {
                    toast.classList.remove('show');
                }, 5000);
            }
            
            // Add periodic glitch effect to container
            setInterval(() => {
                if (Math.random() > 0.9) {
                    const container = document.querySelector('.container');
                    container.style.transform = 'translateX(' + (Math.random() > 0.5 ? 2 : -2) + 'px)';
                    
                    setTimeout(() => {
                        container.style.transform = 'translateX(0)';
                    }, 100);
                }
            }, 5000);
            
            // Add error code cycling for demo purposes
            const errorCodes = [
                'ERR_500_INTERNAL_SERVER_ERROR',
                'ERR_CONNECTION_REFUSED',
                'ERR_TIMEOUT',
                'ERR_NETWORK',
                'ERR_CERT_AUTHORITY_INVALID'
            ];
            
            setInterval(() => {
                const errorCodeElement = document.querySelector('.error-code');
                const randomCode = errorCodes[Math.floor(Math.random() * errorCodes.length)];
                errorCodeElement.textContent = randomCode;
                
                // Add animation
                errorCodeElement.style.animation = 'none';
                errorCodeElement.offsetHeight; // Trigger reflow
                errorCodeElement.style.animation = 'codePulse 3s infinite';
            }, 8000);
            
            // Add console error simulation
            console.error('Error: Failed to load resource');
            console.error('TypeError: Cannot read property \'map\' of undefined');
            console.error('Warning: Potential memory leak detected');
            
            // Add error analytics simulation
            setTimeout(() => {
                console.log('[Error Analytics] Error page viewed - tracking data sent');
            }, 1500);
            
            // Add service worker error simulation
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.getRegistration().then(reg => {
                    if (reg) {
                        console.error('Service Worker Error: Registration failed');
                    }
                });
            }
            
            // Add performance monitoring simulation
            const perfEntries = performance.getEntriesByType('navigation');
            if (perfEntries.length > 0) {
                const navEntry = perfEntries[0];
                console.log(`Page load took ${navEntry.loadEventEnd.toFixed(0)}ms`);
                
                if (navEntry.loadEventEnd > 3000) {
                    console.error('Performance Error: Page load took too long');
                }
            }
            
            // Add battery status simulation
            if ('getBattery' in navigator) {
                navigator.getBattery().then(battery => {
                    if (battery.level < 0.2) {
                        console.warn('Low battery detected - some features may be limited');
                    }
                });
            }
            
            // Add network status simulation
            const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
            if (connection) {
                if (connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g') {
                    console.warn('Slow network connection detected');
                }
            }
            
            // Add more complex error details toggle
            let errorDetailsExpanded = false;
            document.getElementById('errorDetails').addEventListener('click', function(e) {
                if (e.target.closest('.error-details-title')) {
                    errorDetailsExpanded = !errorDetailsExpanded;
                    if (errorDetailsExpanded) {
                        // Simulate loading more detailed error info
                        setTimeout(() => {
                            const detailsContent = document.getElementById('errorDetailsContent');
                            detailsContent.textContent += '\n\nAdditional debug information:\n';
                            detailsContent.textContent += 'Stack trace expanded...\n';
                            detailsContent.textContent += 'Memory usage: 85%\n';
                            detailsContent.textContent += 'CPU usage: 62%\n';
                            detailsContent.textContent += 'Active connections: 14';
                        }, 300);
                    }
                }
            });
            
            // Add error reporting functionality
            document.getElementById('errorDetails').addEventListener('dblclick', function() {
                showToast('Error report sent to developers');
                console.log('Error report submitted with details:', {
                    error: 'ENOENT: no such file or directory',
                    timestamp: new Date().toISOString(),
                    userAgent: navigator.userAgent,
                    viewport: `${window.innerWidth}x${window.innerHeight}`
                });
            });
            
            // Add resize observer for responsive adjustments
            const resizeObserver = new ResizeObserver(entries => {
                for (let entry of entries) {
                    if (entry.contentRect.width < 768) {
                        document.querySelector('.container').classList.add('mobile-view');
                    } else {
                        document.querySelector('.container').classList.remove('mobile-view');
                    }
                }
            });
            
            resizeObserver.observe(document.body);
            
            // Add error simulation for demo purposes
            window.simulateError = function() {
                console.error('Simulated error triggered');
                showToast('Simulated error created');
                
                // Create a temporary error particle that follows the mouse
                const tempError = document.createElement('div');
                tempError.className = 'error-particle';
                tempError.style.width = '30px';
                tempError.style.height = '30px';
                tempError.style.backgroundColor = 'var(--error-primary)';
                tempError.style.animation = 'none';
                tempError.style.opacity = '0.8';
                tempError.style.zIndex = '9999';
                document.body.appendChild(tempError);
                
                // Make it follow the mouse briefly
                let posX = 0, posY = 0;
                const mouseX = event.clientX;
                const mouseY = event.clientY;
                
                const followInterval = setInterval(() => {
                    posX += (mouseX - posX) * 0.2;
                    posY += (mouseY - posY) * 0.2;
                    
                    tempError.style.left = posX + 'px';
                    tempError.style.top = posY + 'px';
                    
                    if (Math.abs(mouseX - posX) < 5 && Math.abs(mouseY - posY) < 5) {
                        clearInterval(followInterval);
                        
                        // Explode into smaller particles
                        tempError.remove();
                        createParticleExplosion(mouseX, mouseY);
                    }
                }, 16);
            };
            
            function createParticleExplosion(x, y) {
                for (let i = 0; i < 10; i++) {
                    const particle = document.createElement('div');
                    particle.className = 'error-particle';
                    particle.style.width = '10px';
                    particle.style.height = '10px';
                    particle.style.left = x + 'px';
                    particle.style.top = y + 'px';
                    particle.style.backgroundColor = `hsl(${Math.random() * 30 + 350}, 100%, 70%)`;
                    particle.style.animation = 'none';
                    particle.style.opacity = '0.8';
                    particle.style.zIndex = '9999';
                    document.body.appendChild(particle);
                    
                    // Random direction
                    const angle = Math.random() * Math.PI * 2;
                    const velocity = 2 + Math.random() * 3;
                    const vx = Math.cos(angle) * velocity;
                    const vy = Math.sin(angle) * velocity;
                    
                    let currentX = x;
                    let currentY = y;
                    let opacity = 0.8;
                    
                    const moveInterval = setInterval(() => {
                        currentX += vx;
                        currentY += vy;
                        opacity -= 0.02;
                        
                        particle.style.left = currentX + 'px';
                        particle.style.top = currentY + 'px';
                        particle.style.opacity = opacity;
                        
                        if (opacity <= 0) {
                            clearInterval(moveInterval);
                            particle.remove();
                        }
                    }, 16);
                }
                
                playErrorSound();
            }
            
            // Add click handler for demo error simulation
            document.addEventListener('click', function(e) {
                if (e.shiftKey && e.altKey) {
                    window.simulateError();
                }
            });
            
            // Add error recovery simulation
            window.attemptRecovery = function() {
                showToast('Attempting system recovery...');
                console.log('Initiating recovery sequence...');
                
                // Simulate recovery progress
                let progress = 0;
                const recoveryInterval = setInterval(() => {
                    progress += 10;
                    console.log(`Recovery progress: ${progress}%`);
                    
                    if (progress >= 100) {
                        clearInterval(recoveryInterval);
                        showToast('System recovery complete');
                        console.log('Recovery completed successfully');
                    }
                }, 300);
            };
            
            // Add secret key combination for recovery
            document.addEventListener('keydown', function(e) {
                if (e.key === 'r' && e.ctrlKey && e.shiftKey) {
                    window.attemptRecovery();
                }
            });
        });
    </script>
</body>
</html>